= Using Shims =

This tutorial illustrates how to use the shims library in your application, as well as how to create your own shims correctly.

----
[[TOC(inline)]]
----

[[BR]]
== What are shims ==
----

Blah blah blah


[[BR]]
== Using shims in your application ==
----

Suppose you're writing an echo server. This server encrypts all traffic on a per-connection basis, and it may be behind a Network Address Translator (NAT). As the application creator, you only need to focus on what is relevant to the core functionalities of the echo server. Your job is to implement it, such that it echoes back messages sent from its clients. Encryptions and NAT rerouting are handled by the underlying shim library.

Here is a sample echo server. You need to tell the shim library what shims you would like to use. In this case, you want to encrypt the traffic. In this example, we're not sure if our echo server will run behind a NAT. Thus, we insert a NatDeciderShim.

{{{
#!python
include ShimStackInterface.repy

server = ShimStackInterface('(RSAShim)(NatDeciderShim)')

def server_func(rip, rport, sock, th, lh):
  msg = ''
  while True:
    msg = sock.recv(1024)
    if msg == 'end':
      break
    sock.send(msg)
    print msg

if callfunc == 'initialize':
  ip = getmyip()
  port = 12345
  server.waitforconn(ip, port, server_func)
}}}



[[BR]]
== Creating your own shims ==
----
Blah blah blah