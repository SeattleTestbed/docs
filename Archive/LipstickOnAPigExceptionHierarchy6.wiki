= Lipstick on a Pig Exception Hierarchy Proposal =

== Overview ==

The [wiki:Lipstickonapig Lipstick on a Pig] strike force is attempting to create a standard exception hierarchy for repy to provide a unified method for handling exceptions within repy programs.

== Purpose ==

 * Repy has specific needs, so we're attempting to target the needs
 * Make use of existing python exceptions where it makes sense
 * Hierarchy was designed to account for the specific types of errors which can happen, up to the general errors which some library calls all apply to
 * PythonException tree is separate from RepyException and is used to show that the two exception hierarchies are distinct

== Proposed Repy Hierarchy ==
{{{
RepyException
 |
 +-- IOError
   |
   +-- NetworkError
     |
     +--AddressError (wrapper for socket.gaierror and socket.herror)
     +--DisconnectedError (whether from the start, or suddenly)
     +--TimeoutError (when a host times out)
   +-- DiskError
     |
     +--FileNotFoundError
     +--InvalidFileModeError
 +-- ResourceError
   |
   +-- ResourceExhaustedError (too many files opened/used?)
   +-- ResourceNotAllowedError (using a port that's not allowed)
     

PythonException
 |
 +-- ValueError (these two are particularly important for library call's performing argument checks)
 +-- TypeError 
 +-- 
 +-- Any exceptions raised by python builtins: KeyError (dicts)
 +-- Builtins generated by programmer mistakes: AttributeError, IndexError, NameError
}}}


== Comparison to Python ==

 * Python library calls tend to throw type errors when arguments of the wrong types are passed in, so Repy mimics that
 * Value errors are when an invalid value, but correct type, such as a negative when expecting a positive are passed into a function.
 * Instead of cryptic Socket.* errors, Repy uses a clearer exception name. (Ex. Socket.gaierror vs AddressError)

TODO: Example user code to catch a network/file error, compared to how it would look with only python code.
