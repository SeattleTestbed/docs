= SeattleGENI Installation !HowTo =

This document explains how to do a fresh install of the SeattleGENI portal on
a machine that is running a Debian-like Linux operating system such as Ubuntu.

 * For info on deploying the production SeattleGENI code and for starting/restarting Apache, see [wiki:ProductionGeniHTTPService]
 * For info on running a test/development version of the SeattleGENI portal using the Django built-in HTTP test server, see [wiki:GENIPortalTesting]

----
[[TOC(inline)]]
----
== Install Dependencies ==
----

SeattleGENI requires at least the following software to be installed:
 
 * [http://www.python.org/ Python] -- the language SeattleGENI is written in
 * [http://mysql-python.sourceforge.net/ Python MySQLDB] -- the python mysql interface
 * [http://www.mysql.com/ MySQL] -- the database
 * [http://www.apache.org/ Apache] -- the web server
 * [http://www.modpython.org/ mod_python] -- necessary for interfacing with Django code
 * [http://www.openssl.org/ OpenSSL] -- necessary for https:// support
 * [http://www.djangoproject.com/ Django] -- necessary to run Django code

Most of these can be installed through a package manager. For example, on a Debian-based system:

{{{
#!sh
$ apt-get install apache2 libapache2-mod-python
$ apt-get install mysql-server mysql-client python-mysqldb
$ apt-get install ntp
}}}

However, Django will probably need to be installed from source because, at the
time of writing, the version of Django required (1.1+) is not available through
most repositories.

To install Django 1.1+, see http://docs.djangoproject.com/en/dev/topics/install/


[[BR]]
== Create MySQL databases ==
----

You need two mysql databases and seperate users with access to each.
  * First database name: `seattlegeni`
  * Second database name: `keydb`

For simplicity you can make the database usernames correspond to the database names.

Here's an example of creating a database and a user:

{{{
#!sh
mysql -u root -p

mysql> create database seattlegeni;

mysql> GRANT ALL PRIVILEGES 
ON seattlegeni.* 
TO 'seattlegeni'@'localhost'
IDENTIFIED BY 'password';
}}}

Be sure to repeat the process for a separate database called `keydb`.


[[BR]]
== Deploying and running SeattleGENI ==
----

  * '''Initial preparation'''
    * Checkout the seattle trunk from svn.
{{{
#!sh
svn co http://seattle.cs.washington.edu/svn/seattle/trunk
}}}
    * Deploy all necessary files to a directory of your choice. The directory
      you deploy to should be the name of a directory that does not yet exist.
      For example:
{{{
#!sh 
python ./trunk/seattlegeni/deploymentscripts/deploy_seattlegeni.py ./trunk /tmp/deploy
}}} 
    * Change to the seattlegeni directory that is in the directory you deployed
      to. For example:
{{{
#!sh 
cd /tmp/deploy/seattlegeni
}}}
      Note: all future steps/instructions will assume you are in this directory. 
  * '''Future tip'''
    * Starting all of the processes described below is simplified by using the script
      `deploymentscripts/start_seattlegeni_components.sh`. See the section on
      "Notes for Production" for more information. For reference, we'll explain
      here how to start the individual components as well as include first-time
      configuration information. Note that when starting these manually, you need
      to start them in the order shown. Most importantly, first the lockserver,
      then the backend, then everything else. However, we're not going to describe
      the initial setup in this order.
  * '''Setup the website and start a development version of it'''
    * Be sure you've already created a mysql database for seattlegeni (e.g.
      called `seattlegeni`).
    * Edit website/settings.py
      * Specify the name of the seattlegeni
        database, as well as the database username, password, etc.
      * Set a long, random string the value of SECRET_KEY.
      * If this is a production launch, also set the following in website/settings.py
{{{
#!python
# If DEBUG is True, then error details will be shown on the website and ADMINS
# will not receive an email when an error occurs. So, this should be False in
# production.
DEBUG = False
TEMPLATE_DEBUG = DEBUG

# The directory where we keep the public keys of the node state keys.
STATE_KEYS_DIR = "path/to/statekeys"

# The directory where the base installers named seattle_linux.tgz, seattle_mac.tgz,
# and seattle_win.zip are located.
BASE_INSTALLERS_DIR = ""

# The directory in which customized installers created by seattlegeni will be
# stored. A directory within this directory will be created for each user.
USER_INSTALLERS_DIR = os.path.join(BASE_INSTALLERS_DIR, "geni")

# The url that corresponds to USER_INSTALLERS_DIR
USER_INSTALLERS_URL = "https://hostname/dist/geni"

# Email addresses of people that should be emailed when a 500 error occurs on
# the site when DEBUG = False (that is, in production). Leave this to be empty
# if nobody should receive an email. 
ADMINS = (
# ('Your Name', 'your_email@domain.com'),
)

# To be able to send mail to ADMINS when there is an error, django needs to
# know about an SMTP server it can use. That info is defined here.
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'an.error.sending.account@gmail.com'
EMAIL_HOST_PASSWORD = 'PASSWORD_HERE'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

# Email address that 500 error notifications will be sent from.
SERVER_EMAIL = "error@seattlegeni.server.hostname"

# We use this so we know which server the email came from by the subject line.
EMAIL_SUBJECT_PREFIX = "[localhost] "
}}}
    * Set your environment variables:
{{{
#!sh
export PYTHONPATH=$PYTHONPATH:/tmp/deploy:/tmp/deploy/seattle
export DJANGO_SETTINGS_MODULE='seattlegeni.website.settings'
}}}
      Note: the /tmp/deploy path entry is to make available the two packages
      'seattlegeni' and 'seattle' which the deployment script created in the
      /tmp/deploy directory. The /tmp/deploy/seattle path item is to ensure
      that repyhelper can find repy files in the python path, as the repy files
      were placed in this directory by the deployment script.
    * Create the database structure:
{{{
#!sh
python website/manage.py syncdb
}}}
    * For development, start the django development webserver:
{{{
#!sh
python website/manage.py runserver
}}}
      You will now have a local development server running on port 8000.
    * For production, run the site through apache:
      TODO: link to info on setting up to run through apache
  * '''Start the lockserver'''
    * Set your environment variables the same way as shown above.
    * In a new shell, start the lockserver:
{{{
#!sh  
python lockserver/lockserver_daemon.py
}}}      
  * '''Setup the key database and start the backend'''
    * Make sure have a mysql database to use for the key database (e.g. called
      `keydb`)
    * Make sure that the file keydb/config.py is not readable by the user the
      website is running as (this is only something to worry about for production
      launch, if you are just developing or testing, this is not required.)
    * Edit the file keydb/config.py and set the database information for the key
      database.
    * Create the key database structure by executing the contents of the file
      keydb/schema.sql on the new key database you created.
{{{
#!sh  
mysql -u[username] -p --database=[keydbname] < keydb/schema.sql
}}}
    * Edit the file backend/config.py and set a value for the authcode.
    * For production launch, make sure that the file backend/config.py is not
      readable by the website.
    * Set your environment variables the same way as shown above.
    * In a new shell, start the backend_daemon from the backend directory
      (because the repy files need to be in the directory it is run from):
{{{
#!sh  
cd backend
python backend_daemon.py
}}}      
  * '''Start the polling daemons'''
    * Set your environment variables the same way as shown above.
    * There's only one polling daemon at the moment. To start it:
{{{
#!sh   
python polling/check_active_db_nodes.py
}}}
  * '''Start the node state transition scripts'''
    * Set your environment variables the same way as shown above.
    * Start each transition script you intend to run:
{{{
#!sh   
python node_state_transitions/TRANSITION_SCRIPT_NAME.py
}}}


[[BR]]
== Configure Apache sites ==
----

To provide encryption, SeattleGENI relies on SSL. Therefore you will need to
setup two !VirtualHost entries at the minimum: one for connections to
port 80 (HTTP), and one for connections to port 443 (SSL).

Here is a somewhat minimal configuration to serve the geni website from
https://mysite/geni/. Note that in this snippet, the second
!VirtualHost entry assumes that you have a server certificate and key
file setup, and the Location directive assumes that your geni
installation lives in /home/geni/ and that your django settings module
is seattlegeni.website.settings. The first !VirtualHost is only provided to redirect
all connections to '''http'''://mysite/geni/* to use
'''https'''://mysite/geni/*. Also, the seattlegeni installation was
deployed to the directory /home/geni/live rather than /tmp/deploy, which
was the deployment directory given as an example in the steps above.

{{{
#!sh
NameVirtualHost *:80
NameVirtualHost *:443

# HTTP
<VirtualHost *:80>
    # Redirect requests for the server index page or that are geni-related
    # to the https site.
    RedirectMatch ^/$ https://mysite/geni/html/register
    RedirectMatch ^/geni https://mysite/geni/html/register
</VirtualHost>

# SSL
<VirtualHost *:443>
    ServerAdmin webmaster@localhost
    SSLEngine on
    SSLCertificateFile /etc/apache2/ssl/server.crt
    SSLCertificateKeyFile /etc/apache2/ssl/server.key
    SSLCertificateChainFile /etc/apache2/ssl/gd_intermediate.crt

    Alias /site_media "/home/geni/live/seattlegeni/website/html/media"
    <Location "/site_media">
        SetHandler None
    </Location>

    Alias /admin_media "/usr/local/lib/python2.5/site-packages/django/contrib/admin/media"
    <Location "/admin_media">
        SetHandler None
    </Location>

    <Location /geni/>
        SetHandler python-program
        PythonHandler django.core.handlers.modpython
        SetEnv DJANGO_SETTINGS_MODULE seattlegeni.website.settings
        PythonOption django.root /geni
        PythonDebug Off
        # We add /usr/local/lib/python2.5/site-packages to ensure that our
        # manual installation of django 1.1 to /usr/local is in the path
        # before any copy of django installed through the distro's repositories.
        PythonPath "['/home/geni/live/', '/home/geni/live/seattle', '/usr/local/lib/python2.5/site-packages'] + sys.path"
    </Location>

    # Make sure various locations people might request redirect somewhere that works.
    RedirectMatch ^/$ https://mysite/geni/html/register
    RedirectMatch ^/geni/?$ https://mysite/geni/html/register
    RedirectMatch ^/geni/html/?$ https://mysite/geni/html/register

    # Don't require a slash on the end of the admin url.
    RedirectMatch ^/geni/admin$ https://mysite/geni/admin/
</VirtualHost>
}}}

To configure SSL you will probably need to install openssl to generate a private key/CSR (Certificate Signing Request), and then possibly purchase a certificate for your site. For more information see [http://slacksite.com/apache/certificate.php this page].

Be sure to restart Apache after you are done changing the configuration files.

{{{
#!sh
$ /etc/init.d/apache2 restart
}}}



[[BR]]
== Conclusion ==
----

Congratulations! You should now have a fully operational SeattleGENI
installation that you can access at https://mysite/geni/