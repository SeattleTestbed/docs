= Speciesism =

[[TOC(inline)]]

== Overview ==

The primary goal of this work is to ensure that nodes can only send packets to opt-in machines. This is important because nodes could otherwise be used to generate SPAM, participate in !BitTorrent swarms with illegal content, or participate in DDOS attacks. There are also several secondary goals:

 * It is important that there is no hidden delay in allowing or denying traffic as this may interfere with measurements or performance of applications on nodes. 
 * The implementation must be secure against most forms of attack. For example, it should not be possible for a machine to opt-in another machine.  
 * The system must scale to over one million nodes (the expected size of Seattle).

Our solution is to use a set of trusted central servers to host a service to manage addresses of machines that have opted in to receiving Seattle traffic. We call this service the Seattle Node Directory Service.  The opt-in machines are responsible for registering (and periodically re-registering) to continue receiving Seattle traffic. In order to prevent spoofing, when a machine wishes to register with the Seattle Node Directory Service, it must first do so through TCP. In response to a registration the Seattle Node Directory Service generates a random renewal key and sends it to the registering machine. The machine can then use this key to renew its registration via UDP. This is done to improve performance, as TCP is expensive and a TCP-only registration system will not scale adequately.
 
Seattle nodes will make decisions about what traffic to allow or deny locally. To do this, nodes cache the relevant parts of the node directory. In most cases, two VMs will communicate only if they share one or more user or owner keys (i.e. if they host VMs that have an overlapping set of users). However, exceptions such as VMs that provide public services may also be handled.

If a program attempts to send a packet to an address not in the node's cache, the node sends a packet to the directory service asking if the address is valid. If the directory service replies positively, the address is added to the node's cache. If the cache becomes full, the least recently used entry is evicted to make room for the new entry.
 
To maintain the node's cache of addresses as current as possible, the Seattle Node Directory Service sends out update packets describing changes to the list of addresses registered for each user key. The update mechanism uses a gossip protocol, with each node forwarding the update packet to a random set of other nodes. For each user key the server will generate a separate update packet containing address changes relevant to just that user key.  Update packets may contain multiple changes, and are sent at short intervals (less than 1 minute apart) to ensure that changes are disseminated quickly.


== Feedback ==
[wiki:Outdated/NatIntegration Integration with NAT Nodes]


