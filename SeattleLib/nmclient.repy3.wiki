= nmclient.repy =

This module contains routines that interact with a node manager to perform actions on nodes. This is designed to be a possible backend implementation to a front end node manager. This module contains all the different ways that one would want to communicate with a node. Implementation is based on this module generating unique handles for each node. See [#Usage usage] for more details.

=== Functions ===

{{{
def nmclient_getvesseldict(nmhandle):
}}}
    Parses a node manager's vessel information and return it to the user (name, ownerkey, etc).

{{{
def nmclient_signedcommunicate(nmhandle, *args):
}}}
    Sends data to a node (opens the connection, writes the communication header, sends all the data, receives the result, and returns the result).

{{{
def nmclient_createhandle(nmIP, nmport, sequenceid = None, timestamp=True, identity = True, expirationtime = 60*60, publickey = None, privatekey = None, vesselid = None, timeout=15):
}}}
    Create a new handle, the IP, port must be provided but others are optional. The default is to have no sequenceID, timestamps on, expiration time of 1 hour, and the program should set and use the identity of the node. The public key, private key, and vesselids are left uninitialized unless specified elsewhere. Regardless, the keys and vesselid are not used to create the handle and so are merely transfered to the created handle.

{{{
def nmclient_destroyhandle(nmhandle):
}}}
    Removes the handle by deleting it.


{{{
def nmclient_get_handle_info(nmhandle):
}}}
    Returns information about a particular handle.


{{{
def nmclient_rawsay(nmhandle, *args):
}}}
    Passes a particular handle to the connection, using the handle and any argument. Use for unsigned operations.


{{{
def nmclient_signedsay(nmhandle, *args):
}}}
    Like above, but instead use for signed operations.


{{{
def nmclient_rawsaytovessel(nmhandle, call, *args):
}}}
    Use this function do raw communication with a vessel.


{{{
def nmclient_signedsaytovessel(nmhandle, call, *args):
}}}
    Like above, but used for signed operations.


{{{
def nmclient_listaccessiblevessels(nmhandle, publickey):
}}}
    Lists all the vessels the publickey can access.


{{{





}}}

=== Usage ===


The idea is that this module returns "node manager handles". A handle may be used to communicate with a node manager and issue commands.   If the
caller wants to have a set of node managers with the same state, this can be done by something like:

{{{
# myid =    # some unique, non-repeating value
# nmhandles = []
# for nm in nodemanagers:
#   nmhandles.append(nmclient_createhandle(nm, sequenceid = myid))
#
# 
# def do_action(action):
#   for nmhandle in nmhandles:
#     nmclient_doaction(nmhandle, ... )
}}}

The above code snippet will ensure that none of the nmhandles perform the actions called in do_action() out of order. A node that "misses" an action (perhaps due to a network or node failure) will not perform later actions unless the sequenceid is reset. Note that the above calls to nmclient_createhandle and nmclient_doaction should really be wrapped in try except blocks for NMClientExceptions.



=== Includes ===

[wiki:SeattleLib/signeddata.repy][[BR]]
[wiki:SeattleLib/session.repy][[BR]]
[wiki:SeattleLib/NATLayer_rpc.repy][[BR]]
[wiki:SeattleLib/sockettimeout.repy][[BR]]
