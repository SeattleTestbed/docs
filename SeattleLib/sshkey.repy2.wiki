= sshkey.repy =

sshkey.repy provides an utility for reading public and private keys. This module is used whenever a sshkey needs to be decrypted, and helps the client by providing a level of abstraction in reading these keys.

This module is capable of reading private keys encrypted with DES3 as well, in addition to the keys encrypted by [wiki:SeattleLib/rsa.repy].
 
=== Functions ===

{{{
def close(self):
}}}
   Free the memory buffer.


{{{
def read(self, n = -1):
}}}
   Read at most size bytes from the file (less if the read hits EOF before obtaining size bytes).

   Notes:[[BR]]
   * If the size argument is negative or omitted, read all data until EOF is reached. The bytes are returned as a string object. An empty    string is returned when EOF is encountered immediately.
   * Raises ValueError if I/O operation on closed file.

 

{{{
def sshkey_file_to_privatekey(filename, password=None):
}}}
   Reads a ssh private key file and returns the key in a format suitable to used by rsa.repy.
  
   Notes: [[BR]]
   * filename is the name of the file containing the ssh-rsa private key. Key should be either unencrypted or encrypted with DES3.
   * password is the password used to encrypt the ssh-rsa private key.
   * Raises IOError if the file cannot be opened.
   * Raises sshkey_SSHException if private key was unable to be decoded. This could happen for any number of reasons and the only quick fix is to generate a new key that is supported.
   * Raises sshkey_EncryptionException is raised if either the password is not provided or if the SSH private key was encrypted with a cipher not supported.
   * Returns a publickey and a privatekey dictionary in the format used by the rsa.repy module.
    {{{
    publickey:
      {'n': 1.., 'e': 6..} with the keys 'n' and 'e'. 
    privatekey:
      {'d':1.., 'p':1.. 'q': 1..} with the keys 'd', 'p', and 'q'.
    }}}

 

{{{
def sshkey_file_to_publickey(filename):
}}}
   Reads a ssh public key file and returns the key in a format suitable to used by rsa.repy.
  
   Notes: [[BR]]
   * filename is the name of the file containing the ssh-rsa publickey.
   * Raises sshkey_SSHException if private key was unable to be decoded. This could happen for any number of reasons and the only quick fix is to generate a new key that is supported. This could happen if the file contains a dss key. 
   * Raises IOError if the file cannot be opened.
   * Raises ValueError if I/O operation on closed _sshkey_StringIO object. This is raised by the _sshkey_StringIO object, but it is never closed in this code so this is unlikely.
   * Returns a publickey dictionary in the format used by the rsa.repy module: {'n': 1.., 'e': 6..} with the keys 'n' and 'e'.


=== Usage ===


{{{
     Example ssh private key:
       -----BEGIN RSA PRIVATE KEY-----
       MIIEowIBAAKCAQEAq6Sbj5wJWmDbyQnyACihkpwttRG57u9MGiB59jT/Nl96Q0Lc
       kMACD45GB+JUSzMvBpT0R9Dp+e83Jk12sV756wD9Qn5x4uKvVp4aFea2k6EPf/2x
       ...
       oqBUsB6Bfp+NZGCxwICn+OV9N8z2bFWENYwx0Ubr7UlnETe05IqO
       -----END RSA PRIVATE KEY-----
     
     Example ssh private key with encryption:
        -----BEGIN RSA PRIVATE KEY-----
        Proc-Type: 4,ENCRYPTED
        DEK-Info: DES-EDE3-CBC,57987BCBC21F738A
  
        1ROqqy4LIzr6yENPZo0tXAJCARSV3eQIUXfPzaYtAwbp/mm2JHeLlmHd/1mj2bsj
        mcclABIA95mHkKSLMGirgHxlbvfHvUoQt08YIb9iEd5DpQSwHmUP7FfmvUaFvhvR
        ...
        oqBUsB6Bfp+NZGCxwICn+OV9N8z2bFWENYwx0Ubr7UlnETe05IqO
        -----END RSA PRIVATE KEY-----
  
}}}


{{{
  n = 21667921211657225837662407896465902368515789297235434239596619924307206899294162617496908503082255788741331054510718239898239470029019964004015025454981572368698224916216238294783977496064641263839384657113694578478832964586562534638415195769419049079940485169596961691551690001282150028245137262488209214161129366123652506206000877580765505669160809419715434736933306709983256215776587641397097270565321315570096720236499564697436971911768999865113008192781439377934850376539083555988066915494601219079196695008621852622523855275891959381489627706984641922468411931242527601288136532337181942245358441104751310960989
  e = 35
  
  filename = 'test_sshkey_publickey'
  
  publickey = sshkey_file_to_publickey(filename)   
     
  assert(publickey['n'] == n)
  assert(publickey['e'] == e)
}}}

=== Includes ===

[wiki:SeattleLib/sshkey_paramiko.repy]