 = bundle.repy =

bundle.repy provides an utility for packaging multiple files into a single file.  Its main intent is to allow repy programmers to easily upload static dependencies along with their repy programs.  When bundling files with a repy program, the repy program will automatically extract all files bundled within it when it is executed.

[[TOC(inline)]]


 == How to Use ==
 === Command-Line ===
A command-line wrapper of this class is available.  The functionality provided is largely identical to that provided by the API.

|| Action || Syntax || Description ||
|| c      || $ python bundler.py c source_fname output_fname || Creates a bundle.  You can either create the bundle as a new file (recommended), or overwrite the existing file.  You need to pass in an output filename, or pass the -f flag if you would like to overwrite. ||
|| a      || $ python bundler.py a bundle_fname file1 file2 ... || Adds the specified files to the bundle. ||
|| e      || $ python bundler.py e bundle_fname file1 file2 ... || Extracts the specified files from the bundle.  Existing files in the current directory with the same name(s) will be overwritten.||
|| e*     || $ python bundler.py e* bundle_fname || Extracts all files from the bundle.  Existing files in the current directory with the same name(s) will be overwritten.||
|| l      || $ python bundler.py l bundle_fname || Lists the contents of the bundle. ||
|| r      || $ python bundler.py r bundle_fname file1 file2 ... || Removes the specified files from the bundle.  Note: This data cannot be recovered! ||
|| r*     || $ python bundler.py r* source_fname output_fname || Removes all traces of a bundle from a file.  A useful side effect is that it removes all bundled files from the bundle, as well as restoring the bundle to the file that was originally used to create the bundle.  You can either save the result as a new file (recommended), or overwrite the existing file.  You need to pass in an output filename, or pass the -f flag if you would like to overwrite. || 

 === API ===
You can also access the bundle functionality through an API.

{{{
class bundle_Bundle:
}}}
   Provides a simple object-oriented API to manipulate bundles.

{{{
def bundle_Bundle.__init__(self, bundlefname, mode):
}}}
   Creates a bundle object.  Its behavior depends on the mode specified.
|| Mode || Effects ||
|| w    || Creates a new Bundle file. If a Bundle already exists, it raises a bundle_InvalidOperationError.  ||
|| a    || If this is an existing Bundle, opens it for modification.  If it doesn't exist yet, create it. ||
|| r    || Opens a bundle in read-only mode. ||

{{{
def bundle_Bundle.add_files(self, filenames):
}}}
   Adds the specified files to the bundle object.  The files must be in the current working directory.
   If the files already exist, a bundle_InvalidOperationError is raised.

{{{
def bundle_Bundle.remove_files(self, filenames):
}}}
   Removes the specified files from the bundle object. 
   If the files don't exist, a bundle_InvalidOperationError is raised.

{{{
def bundle_Bundle.extract_files(self, filenames):
}}}
   Extracts the specified files to the current working directory.
   If the files already exist in the directory, they will be overwritten.
   If the file doesn't exist, a bundle_InvalidOperationError is raised.

{{{
def bundle_Bundle.extract_to_string(self, fname):
}}}
   Extracts the specified file and returns its contents as a single string.
   If the file doesn't exist, a bundle_InvalidOperationError is raised.

{{{
def bundle_Bundle.list(self):
}}}
   Returns the contents of the bundle as a dictionary containing filenames as keys, and a description dictionary as its values.
   The description dictionary contains the 'length' key.  It is designed in this way to allow new fields to be added in as needed.

{{{
def bundle_Bundle.close(self):
}}}
   Closes the internal file object.

{{{
def bundle_clear_bundle_from_file(fn):
}}}
   Removes all traces of a bundle from the specified file.
   Raises an InvalidOperationError if the file is not a valid bundle.


 == Usage Example ==
 === Command-Line ===
We have a file '''source.repy''', and it depends on the files '''data1.png''' and '''data2.html'''. We would like to bundle the files alongside '''source.repy''' as a single file called '''destination.bundle.repy''', and then run it on a vessel via seash.

Assume that we have the following files in the current directory:
 * source.repy - This is our program that needs the files data1.png and data3.html.
 * data1.png
 * data2.txt
 * data3.html

{{{
# Create the bundle "destination.repy"
$ python bundler.py c source.repy destination.bundle

# Add the files
$ python bundler.py a destination.bundle data1.png data2.txt data3.html

# Suppose we accidentally included data2.txt.
$ python bundle.py r destination.bundle data2.txt

# Just to make sure the bundle contains what we want...
$ python bundle.py l destination.bundle
Bundle contents:
Filename   Size (bytes)
data1.png  36
data3.html 224

# Preprocess the bundle for auto-extraction (This step is optional, you only need it if you want to be able to run the bundle)
$ python repypp.py destination.bundle destination.bundle.repy

# Congratulations, you now have an auto-extracting bundle named destination_bundle.repy!
# Now suppose we want to extract what's inside destination.bundle.repy

# We can do it one by one...
$ python bundle.py e destination.bundle.repy data1.png data3.html

# Or we can extract everything simultaneously
$ python bundle.py e* destination.bundle.repy

# But now suppose we lost source.repy, and we want to recover it from the bundle.
$ python bundle.py r* destination.bundle.repy source_copy.repy

}}}

=== API ===

{{{
# Creating an archive
myarchive = bundle_bundle('myarchive', 'w')
myarchive.add('log1')
myarchive.add('log2')
myarchive.close()

# Modifying the archive
myarchive.open('a')
myarchive.remove('log2')
myarchive.add('replacement')
myarchive.close()

# Reading data from the archive
myarchive.open('r')
myarchive.list()

# Read to a string
log1contents = myarchive.extract_to_string('log1')

# Extract everything
myarchive.extract_all()
}}}

 == Includes ==
 * [wiki:SeattleLib/base64.repy]
 * [wiki:SeattleLib/serialize.repy]