 = bundle.repy =

bundle.repy provides an utility for packaging multiple files into a single file.  It is designed with the intention to allow repy programmers to easily upload static files along with their repy programs.  You can write your program assuming that these files will be present in the local directory, bundle the said files into the program and then distribute it.  The extraction of these files is done for you, before execution.  Not all bundles must be self-extracting, as you can also create bundles (e.g. in your program via the API) to facilitate file transfer.  Aside from self-extraction, there is no difference between a self-extracting bundle and a non-self-extracting bundle.  All of the actions described in this document can be performed on either bundle type, and will produce the same results.

Bundles are identified by a '''.bundle''' extension.  Self-extracting bundles are identified by a '''.bundle.repy''' extension.

[[TOC(inline)]]


 == How to Use ==
 === Command-Line ===
A command-line wrapper of this class is available.  The functionality provided is largely identical to that provided by the API. 

|| Action || Syntax || Description ||
|| c      || $ python bundler.py c source_fname output_fname || Creates a bundle.  You can either create the bundle as a new file (recommended), or overwrite the existing file.  You need to pass in an output filename, or pass the -f flag if you would like to overwrite. ||
|| a      || $ python bundler.py a bundle_fname file1 file2 ... || Adds the specified files to the bundle. ||
|| e      || $ python bundler.py e bundle_fname file1 file2 ... || Extracts the specified files from the bundle.  Existing files in the current directory with the same name(s) will be overwritten.||
|| e*     || $ python bundler.py e* bundle_fname || Extracts all files from the bundle.  Existing files in the current directory with the same name(s) will be overwritten.||
|| l      || $ python bundler.py l bundle_fname || Lists the contents of the bundle. ||
|| r      || $ python bundler.py r bundle_fname file1 file2 ... || Removes the specified files from the bundle.  Note: This data cannot be recovered! ||
|| r*     || $ python bundler.py r* source_fname output_fname || Removes all traces of a bundle from a file.  A useful side effect is that it removes all bundled files from the bundle, as well as restoring the bundle to the file that was originally used to create the bundle.  You can either save the result as a new file (recommended), or overwrite the existing file.  You need to pass in an output filename, or pass the -f flag if you would like to overwrite. || 


 === Repy API ===
The bundle is designed to be used directly by a repy program.  It exposes an object-oriented interface to manipulating bundles. 

==== bundle_bundle.!__init!__() ====
 Purpose::
  Creates a new bundle object.  Various bundle operations may then be performed.
 Arguments::
  '''bundlefn''' (str): Where the bundle is, or where to create it.  It must be in the current directory.[[br]]
  '''mode''' (str): 'r' for readonly, 'w' to create a new bundle, 'a' to modify an existing bundle.[[br]]
  '''srcfn''' (str/None)(optional): Only used if opening in 'w' mode.  If this is set, overwrite must be False.  The contents of this file will be included with the output bundle.[[br]]
  '''overwrite''' (bool) (optional): Only used if opening in 'w' mode.  Either this or overwrite may be specified.  If set to True, srcfn must be None.  The contents of the file referred to by bundlefn will be overwritten.  The original contents will be embedded in this new file.
 Side Effects::
  If opening in 'w' or 'a', the bundle will be created if it does not already exist in the current directory.
 Exceptions::
  None
 Returns::
  None

==== bundle_bundle.add_files() ====
 Purpose::
  Adds the specified files into the bundle.
 Arguments::
  '''fnames''' (list<str>): The names of the files to add to the bundle, as a list. [[br]]
 Side Effects::
  The contents of each file that is specified will be read, encoded using base64, and then written into the end of the bundle.
 Exceptions::
  None
 Returns::
  None

==== bundle_bundle.extract_files() ====
 Purpose::
  Extracts the specified files from the bundle, and then write them into the current directory.
 Arguments::
  '''fnames''' (list<str>): The names of the files to extract from the bundle. [[br]]
 Side Effects::
  The contents of each file that is specified will be read from the bundle, decoded using base64, and then written into the current directory. [[br]]
  Existing files in the current directory that share the same filename as any of the specified files will be overwritten.
 Exceptions::
  None
 Returns::
  None

==== bundle_bundle.remove_files() ====
 Purpose::
  Removes the specified files from the bundle.
 Arguments::
  '''fnames''' (list<str>): The names of the files to remove from the bundle. [[br]]
 Side Effects::
  The specified bundle contents will be removed from the bundle.  Any data lost is not recoverable. A temporary copy of the bundle is created in the local directory, and is removed when this function returns.
 Exceptions::
  None
 Returns::
  None

==== bundle_bundle.contents() ====
 Purpose::
  Returns the contents of the bundle.
 Arguments::
  None
 Side Effects::
  None
 Exceptions::
  None
 Returns::
  A dictionary showing the details of each file contained within the bundle.  An example value is shown below.

Example return value:
{{{
#!python
{'thefirstfile': {'length': 142}, 'thesecondfile': {'length': 11}}
}}}


==== bundle_clear_bundle_contents() ====
 Purpose::
  Clears all traces of a bundle from the specified file.
 Arguments::
  '''bundlefn''' (str): The name of the bundle to clear.  It must be in the current directory. [[BR]]
  '''outputfn''' (str/None) (optional): If set, the result will be generated in this file.  Otherwise, overwrite must be set to True. [[BR]]
  '''overwrite''' (bool) (optional): If set, the original file will be overwritten with the result.  Otherwise, outputfn must be set. [[BR]]
 Side Effects::
  The specified file will have all of its bundle data removed.  The result will be the file that was used to create the bundle. [[BR]]
  A temporary file will be created in the current directory, and will be removed when the function returns.
 Exceptions::
  None
 Returns::
  None

Example return value:
{{{
#!python
{'thefirstfile': {'length': 142}, 'thesecondfile': {'length': 11}}
}}}



 == Command-Line Usage Example: Creating a Self-Extracting HTTP Server Bundle ==
We have a repy program '''httpserver.repy''', and it depends on the files '''logo.png''' and '''index.html'''. We would like to bundle the files alongside '''httpserver.repy''' into an auto-extracting repy program, '''httpserver.bundle.repy'''.  '''error.log''' is a file that we do NOT want included.

Assume that we have the following files in the current directory:
 * httpserver.repy - This is our simple http server that serves the files '''logo.png''' and '''index.html'''.
 * logo.png
 * index.html
 * error.log

=== Creating the Intermediary Bundle ===
First, we must create an intermediary non-self-extracting bundle.  This bundle has to first pass through the repy preprocessor to have all the auto-extraction script's dependencies embedded into it.
{{{
#!sh
$ python bundler.py c httpserver.repy server.bundle
}}}

=== Adding Files ===
Now, let's add the files that we want to embed into the bundle.  The files here are '''logo.png''' and '''index.html'''.  Since we can make mistakes, we'll also include '''error.logdata1.png''' on purpose.
{{{
#!sh
$ python bundler.py a server.bundle logo.png index.html error.log
}}}

=== Removing Accidental Inclusions ===
It seems like we've accidentally included '''error.log'''!  Thankfully, we don't have to start afresh; we can simply remove the extraneous file.
{{{
#!sh
$ python bundler.py r server.bundle error.log
}}}

=== Contents Verification ===
Before we finalize the auto-extracting bundle, it would be wise to make sure that the bundle contains all the files that we want it to have.  We need two files, '''logo.png''' and '''index.html'''.  The listed file sizes are their sizes within the bundle.
{{{
#!sh
$ python bundler.py l server.bundle
}}}
And we should get the following output (filesizes are simulated, actual values depend on the size of your files):
{{{
Bundle contents:
Filename   Size (bytes)
logo.png   23536
index.html 1338
}}}

=== Generate Auto-Extract Bundle ===
Finally, we can pass the intermediary bundle through the repy preprocessor to generate an auto-extracting bundle.
Note that this step is '''optional'''. You only need it if you want to be able to run the bundle through repy.  If you're creating a bundle only as a means of packaging files together, you do '''not''' need to do this step.
{{{
#!sh
$ python repypp.py server.bundle httpserver.bundle.repy
}}}

Congratulations, you now have an auto-extracting bundle named httpserver.bundle.repy!

=== Extracting Bundle Contents ===
Even though the most useful feature of the bundler is its self-extraction feature, you can also extract files from the bundle manually.  You can do it in two ways:

You can do it on a file-by-file basis:
{{{
#!sh
$ python bundler.py e httpserver.bundle.repy logo.png index.html
}}}

Or you can tell the bundler to extract everything simultaneously:
{{{
#!sh
$ python bundler.py e* httpserver.bundle.repy
}}}

=== Clearing a Bundle / Source File Recovery ===
However, now suppose you need access to the original httpserver code.  However, you only have access to the bundle, as a colleague of yours never bothered to include a version of the original source code.  You can use the clear function to remove all traces of a bundle from a file.
{{{
#!sh
$ python bundler.py r* httpserver.bundle.repy original_httpserver.repy
}}}

 == Includes ==
 * [wiki:SeattleLib/base64.repy]
 * [wiki:SeattleLib/serialize.repy]