 = bundle.repy =

bundle.repy provides an utility for packaging multiple files into a single file.  Its main intent is to allow repy programmers to easily upload static dependencies along with their repy programs.  When bundling files with a repy program, the repy program will automatically extract all files bundled within it when it is executed.

[[TOC(inline)]]


 == How to Use ==
 === Command-Line ===
A command-line wrapper of this class is available.  The functionality provided is largely identical to that provided by the API.

|| Action || Syntax || Description ||
|| c      || $ python bundler.py c source_fname output_fname || Creates a bundle.  You can either create the bundle as a new file (recommended), or overwrite the existing file.  You need to pass in an output filename, or pass the -f flag if you would like to overwrite. ||
|| a      || $ python bundler.py a bundle_fname file1 file2 ... || Adds the specified files to the bundle. ||
|| e      || $ python bundler.py e bundle_fname file1 file2 ... || Extracts the specified files from the bundle.  Existing files in the current directory with the same name(s) will be overwritten.||
|| e*     || $ python bundler.py e* bundle_fname || Extracts all files from the bundle.  Existing files in the current directory with the same name(s) will be overwritten.||
|| l      || $ python bundler.py l bundle_fname || Lists the contents of the bundle. ||
|| r      || $ python bundler.py r bundle_fname file1 file2 ... || Removes the specified files from the bundle.  Note: This data cannot be recovered! ||
|| r*     || $ python bundler.py r* source_fname output_fname || Removes all traces of a bundle from a file.  A useful side effect is that it removes all bundled files from the bundle, as well as restoring the bundle to the file that was originally used to create the bundle.  You can either save the result as a new file (recommended), or overwrite the existing file.  You need to pass in an output filename, or pass the -f flag if you would like to overwrite. || 

 === API ===
You can also access the bundle functionality through an API.

{{{
class bundle_Bundle:
}}}
   Provides a simple object-oriented API to manipulate bundles.

{{{
def bundle_Bundle.__init__(self, bundlefname, mode):
}}}
   Creates a bundle object.  Its behavior depends on the mode specified.
|| Mode || Effects ||
|| w    || Creates a new Bundle file. If a Bundle already exists, it raises a bundle_InvalidOperationError.  ||
|| a    || If this is an existing Bundle, opens it for modification.  If it doesn't exist yet, create it. ||
|| r    || Opens a bundle in read-only mode. ||

{{{
def bundle_Bundle.add_files(self, filenames):
}}}
   Adds the specified files to the bundle object.  The files must be in the current working directory.
   If the files already exist, a bundle_InvalidOperationError is raised.

{{{
def bundle_Bundle.remove_files(self, filenames):
}}}
   Removes the specified files from the bundle object. 
   If the files don't exist, a bundle_InvalidOperationError is raised.

{{{
def bundle_Bundle.extract_files(self, filenames):
}}}
   Extracts the specified files to the current working directory.
   If the files already exist in the directory, they will be overwritten.
   If the file doesn't exist, a bundle_InvalidOperationError is raised.

{{{
def bundle_Bundle.extract_to_string(self, fname):
}}}
   Extracts the specified file and returns its contents as a single string.
   If the file doesn't exist, a bundle_InvalidOperationError is raised.

{{{
def bundle_Bundle.list(self):
}}}
   Returns the contents of the bundle as a dictionary containing filenames as keys, and a description dictionary as its values.
   The description dictionary contains the 'length' key.  It is designed in this way to allow new fields to be added in as needed.

{{{
def bundle_Bundle.close(self):
}}}
   Closes the internal file object.

{{{
def bundle_clear_bundle_from_file(fn):
}}}
   Removes all traces of a bundle from the specified file.
   Raises an InvalidOperationError if the file is not a valid bundle.


 == Usage Example ==
 === Command-Line ===
We have a file '''source.repy''', and it depends on the files '''data1.png''' and '''data2.html'''. We would like to bundle the files alongside '''source.repy''' into an auto-extracting repy program, '''autoextract_bundle.repy'''.  '''data2.txt''' is a file that we do NOT want included.

Assume that we have the following files in the current directory:
 * source.repy - This is our program that needs the files data1.png and data3.html.
 * data1.png
 * data2.txt
 * data3.html

==== Creating the Intermediary Bundle ====
First, we must create an intermediary non-self-extracting bundle.  This bundle has to first pass through the repy preprocessor to have all the auto-extraction script's dependencies embedded into it.
{{{
#!sh
$ python bundler.py c source.repy data.bundle
}}}
==== Adding Files ====
Now, let's add the files that we want to embed into the bundle.  The files here are '''data1.png''', '''data2.txt''', and '''data3.html'''.
{{{
#!sh
$ python bundler.py a data.bundle data1.png data2.txt data3.html
}}}

==== Removing Accidental Inclusions ====
It seems like we've accidentally included '''data2.txt'''.  Thankfully, we don't have to start afresh; we can simply remove the extraneous file.
{{{
#!sh
$ python bundle.py r data.bundle data2.txt
}}}

==== Contents Verification ====
Before we finalize the auto-extracting bundle, it would be wise to make sure that the bundle contains all the files that we want it to have.  We need two files, '''data1.png''' and '''data3.html'''.  The listed file sizes are their sizes within the bundle.
{{{
#!sh
$ python bundle.py l data.bundle
}}}
And we should get the following output (filesizes are simulated, actual values depend on the size of your files):
{{{
Bundle contents:
Filename   Size (bytes)
data1.png  23536
data3.html 1338
}}}

==== Generate Auto-Extract Bundle ====
Finally, we can pass the intermediary bundle through the repy preprocessor to generate an auto-extracting bundle.
Note that this step is '''optional'''. You only need it if you want to be able to run the bundle through repy.  If you're creating a bundle only as a means of packaging files together, you do '''not''' need to do this step.
{{{
#!sh
$ python repypp.py data.bundle autoextract_bundle.repy
}}}

Congratulations, you now have an auto-extracting bundle named autoextract_bundle.
==== Extracting Bundle Contents ====
Even though the most useful feature of the bundler is its self-extraction feature, you can also extract files from the bundle manually.  You can do it in two ways:

You can do it on a file-by-file basis:
{{{
#!sh
$ python bundle.py e destination.bundle.repy data1.png data3.html
}}}

Or you can tell the bundler to extract everything simultaneously:
{{{
#!sh
$ python bundle.py e* destination.bundle.repy
}}}

==== Clearing a Bundle / Source File Recovery ====
However, now suppose you need access to the original source file, but you only have access to the bundle (you accidentally deleted the original source file, or it was never provided to you to begin with, etc).  You can use the clear function to remove all traces of a bundle from a file.
{{{
#!sh
$ python bundle.py r* destination.bundle.repy source_copy.repy
}}}

=== API ===

{{{
#!python
# Create the bundle "destination.repy"
mybundle = bundle_bundle("destination.bundle", src='source.repy')

# Add the files
$ python bundler.py a destination.bundle data1.png data2.txt data3.html

# Suppose we accidentally included data2.txt.
$ python bundle.py r destination.bundle data2.txt

# Just to make sure the bundle contains what we want...
$ python bundle.py l destination.bundle
Bundle contents:
Filename   Size (bytes)
data1.png  36
data3.html 224

# Preprocess the bundle for auto-extraction (This step is optional, you only need it if you want to be able to run the bundle)
$ python repypp.py destination.bundle destination.bundle.repy

# Congratulations, you now have an auto-extracting bundle named destination_bundle.repy!
# Now suppose we want to extract what's inside destination.bundle.repy

# We can do it one by one...
$ python bundle.py e destination.bundle.repy data1.png data3.html

# Or we can extract everything simultaneously
$ python bundle.py e* destination.bundle.repy

# But now suppose we lost source.repy, and we want to recover it from the bundle.
$ python bundle.py r* destination.bundle.repy source_copy.repy
}}}

 == Includes ==
 * [wiki:SeattleLib/base64.repy]
 * [wiki:SeattleLib/serialize.repy]