= dylink.repy =

This module is designed to help dynamically link against other modules, and to provide an {{{import}}}-like functionality in Repy. This module should be used in place of the deprecated [wiki:SeattleLib/repypp.py].

{{{dylink.repy}}}'s main mechanisms are {{{dy_import_module}}}, {{{dy_import_module_symbols}}} and {{{dy_dispatch_module}}}.
 * {{{dy_import_module_symbols}}} allows importing directly into the current context (a la Python's {{{from X import *}}}):[[BR]]
{{{
dy_import_module_symbols("library_name.extension")
# That's it! If an_interesting_function is defined in library_name, we can now use it:
an_interesting_function()
}}}
 * {{{dy_import_module}}} allows importing as an encapsulated module (a la {{{import X as Y}}}):[[BR]]
{{{
desired_library_name = dy_import_module("actual_library_name.extension")

# Now we can access the library functions as expected
desired_library_name.some_function()
}}}
 * {{{dy_dispatch_module}}} is a convenience for programs that want to behavior as "modules". These are behavior altering programs, that don't execute any code, but provide new code or alter behavior of builtin calls. These types of modules expect to be chained and to recursively call into the next module in the chain. [[BR]]
{{{dy_dispatch_module}}} will take the globally defined {{{CHILD_CONTEXT}}} and evaluate the next module in that context. Modules are free to alter {{{CHILD_CONTEXT}}} prior to calling {{{dy_dispatch_module}}}.

Modules being imported are called with {{{callfunc}}} set to "import" to allow modules to have special behavior. If the module performs some action on import, it is possible that {{{dy_}}}* never returns, as with {{{import}}} in Python.

=== Functions ===
 

{{{
def dy_import_module_symbols(module, new_callfunc="import", additional_globals=[]):
}}}
   Dynamically link in new modules at runtime.

   Notes: [[BR]]
   * module is the filename of the module to import. This must include extensions.
   * new_callfunc is the value to use for callfunc during the import. Defaults to "import".
   * additional_globals is an array of string globals which will be provided to the imported module. E.g. if the current context defines "foo" and this should be made available in addition to the Stock Repy API, this can be provided as {{{["foo"]}}}
   * Raises an exception if the module cannot be found, or if there is a problem initializing a VirtualNamespace around the module. See VirtualNamespace.
   

 
{{{
def dy_import_module(module, new_callfunc="import", additional_globals=[]):
}}}
   Imports modules dynamically into the bundles module like object which is returned.

   Notes:[[BR]]
   * See dy_import_module_symbols for details on the call parameters.
   * Returns a module like object.
 

{{{
def dy_dispatch_module(eval_context=None):
}}}
   Allows a module to recursively evaluate another context. When the user specifies a chain of modules and programs to evaluate, this call steps to the next module.

   Notes:[[BR]]
   * eval_context is the context to pass to the next module that is being evaluated.
   * As with the module being evaluated. An exception will be raised if the module to be evaluated cannot be initialized in a VirtualNamespace    due to safety or syntax problems, or if the module does not exist.
   * Note that at the end of a call of dylink_dispatch, execution will switch to the next module.
   * Returns True if a recursive evaluation was performed, False otherwise.


 
= Notes On Usage =
Using the {{{dy_*}}} functions in your code requires that you designate {{{dylink.repy}}} the program you want to {{{runv2}}}/{{{startv2}}} in seash, and give it the name of your program as the first parameter. Assuming you have already {{{upload}}}ed dylink and my_program:
{{{
alice@%1 !> startv2 dylink.repy my_program.r2py PARAMS_TO_MY_PROGRAM
}}}

This also applies to running code on the command line:
{{{
python repy.py restrictionsfile dylink.repy my_program.r2py PARAMS_TO_MY_PROGRAM
}}}
This makes {{{dylink}}} set up its functions, and then read in and execute your code with the parameters you specified. Calling your code directly (without {{{dylink.repy}}}) will result in the {{{dy_*}}} functions undefined, leading to errors like
{{{
Exception (with type 'exceptions.NameError'): name 'dy_import_module_symbols' is not defined
}}}





{{{
#!comment
Old info:
= Usage =
Note since this is essentially running in the background, an user can just use the keyword "include" and then any module in the [wiki:SeattleLib SeattleLib]. The difference between this module and the [wiki:SeattleLib/repypp.py] is that instead of including all the necessary files at the beginning of the code, dylink.repy will '''dynamically''' include them as necessary.
}}}