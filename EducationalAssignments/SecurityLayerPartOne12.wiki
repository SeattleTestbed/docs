
= Building a Security Layer =  

This exercise is intended to teach students how security mechanisms work.  Specifically, this assignment illustrates how to create, use and test security layers. First, students will write a security layer called a reference monitor.   Then they will write a series of test cases to ensure their reference monitor is secure. 

'''NOTE WINDOWS USERS:''' You must have Python2.5 or Python2.6, to complete this assignment. Instructions on how to get Python for windows can be found [InstallPythonOnWindows here].  These instructions also illustrate how to check if Python is already installed.

[[TOC(inline)]]


[[BR]]
== Overview ==
----
Through this assignment students will gain familiarity with Repy, Python and command line utilities. Three design paradigms are at work in this assignment: accuracy, efficiency, and security.

 * Accuracy: Students are expected to only disallow "MZ" to the be the first two characters.    All other characters should be allowed.
 * Efficiency: Students are expected to disallow this write with a minimum amount of resources  used.
 * Security: The attacker should not be able to circumvent the security layer.

First, students will write a security layer which blocks writing "MZ" in the first two characters of a file.  Second, students will create test files, to insure their security layer accomplishes the intended task. 

'''Note:''' A full discourse of how to write test cases and security layers is given below.      

[[BR]]
== Prerequisites ==

[[BR]]
=== Getting to know Python/Repy ===
----
Students will need Python and the Repy API in order to complete this assignment.  Repy can be downloaded '''[https://seattle.cs.washington.edu/geni/download/flibble/ here]'''.  Once obtained students should read the Repy tutorial found [wiki:RepyTutorial here].
[[BR]]
=== Helpful links ===
----
The following links will aid students in becoming comfortable with Python, Repy and seattle:
 * Python tutorial: '''[http://docs.python.org/tutorial/]'''
 * Seattle tutorial: '''[https://seattle.cs.washington.edu/wiki/PythonVsRepy]'''

[[BR]]
== Implementation ==

[[BR]]
=== Building a security layer  ===
----

Students are now ready to build a reference monitor.   '''[wiki:RepyV2SecurityLayers This]''' will give students a feel for the syntax used to build security layers.  Please note In order to complete this assignment students should have familiarity with basic object oriented programming, function calls, dictionaries, and network traffic. 

Students will augment `readat()` and `writeat()`, two functions used in Repy to read and write a file.  An example for a modification to `writeat()` is shown below:

{{{
	def writeat(self,data,offset):
		BUFFER.append("SecureFile.writeat")
		if data.startswith("MZ") and (offset == 0):	
			raise ValueError("Cannot start file with MZ!")
		else:
			BUFFER.append("SecureFile.writeat")
			return self.file.writeat(data,offset)

}}} 

The above code, checks to if a file starts with "MZ". If an error is raised and the code will not be run.  This simple reference monitor is not intended to be exhaustive of all forms of attacks students should block against.  However, it represents an example of something that should be blocked.  

[[BR]]
=== Testing your security layer ===
----
In the second half of the assignment students will create programs which write "MZ" to the first two characters of a file.  These programs should be similar to the test cases used in the first half of the assignment.  Attacks should include several methods of attempting to write "MZ" to a file. Students will be graded on how well, the reference monitor defends against a series of test cases, generated by the instructor.

Once the security layer is in place, a number of attacks need to be written.  An example of a simple attack is as follows:

{{{
x=open("Something.file","w")
#opens a file, so we can write to it
writeat("MZ",0)
#attempts to write MZ to the file
x.close()
#closes the file after trying to write "MZ" to the file.
}}}

This simple attack attempts to write "MZ" to a file in straight forward way.  This attack is not intended to be exhaustive of all possible attacks students could implement.  However, notice if this code is run with the above security layer, it will raise an error.  Feel free to copy the code and give it a try!

[[BR]]
=== Running your security layer ===
----
Finally, in order to run a security layer, students should be comfortable with command line utilities.  The following call at a terminal will execute a given reference monitor:

{{{python repy.py restrictions.default encasementlib.repy [security_layer].repy [program].repy }}}

This will allow students to test their security layer.
[[BR]]
== Notes and Resources ==
----
   
 * A list of command line utilities for windows can be found at '''[http://commandwindows.com/command3.htm]'''

 * A list of command line utilities for linux/apple/powershell '''[http://www.pixelbeat.org/cmdline.html]'''

 * A tutorial on how to write security layers can be found [wiki:RepyV2SecurityLayers here].  At the end of the tutorial students are shown '''how to test their security layers with an example'''. 

 * The following link is an excellent source for information about security layers: '''[http://www.cs.washington.edu/homes/arvind/papers/ccs10.pdf]'''

 * '''[https://seattle.cs.washington.edu/browser/seattle/branches/repy_v2/benchmarking-support/allnoopsec.py repy_v2/benchmarking-support/allnoopsec.py]''' is an empty security layer that doesn't perform any operations.

 * '''[https://seattle.cs.washington.edu/browser/seattle/branches/repy_v2/benchmarking-support/all-logsec.py repy_v2/benchmarking-support/all-logsec.py]''' is security layer that works for logging functions.

 * Students are able to add multiple security layers to Repy, this may be useful for testing different mitigations separately.

 * In repy log replaces print from python.  Many students find this to be a stumbling block.


[[BR]]
== Extra Credit ==
----
As extra credit, students may make a second reference monitor which disallows 'p0wnd' to be written anywhere in a file.  This second reference monitor should be tested by students in a similar fashion as the first.  This is a natural extension of the first exercise. 
[[BR]]
== What to turn in? ==
----

 * Turn in a repy file called reference_monitor_[student's name or id number].repy
 * For extra credit turn in a second repy file called extra_credit_[student's name or id number].repy