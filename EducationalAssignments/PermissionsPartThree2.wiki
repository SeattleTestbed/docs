
= Fixing your security layer =  

In this assignment you will analyze the bugs in your security layer from [wiki:EducationalAssignments/PermissionsPartOne PermissionsPartOne] and fix them.  You may want to use test cases from [wiki:EducationalAssignments/PermissionsPartTwo PermissionsPartTwo] to help identify these bugs.  Finally, you will write a report discussing the different classes of bugs that your code had, and why.

[[TOC(inline)]]
[[BR]]
== Overview ==
----
In this assignment you are fixing your reference monitor.  You have been sent a bunch of test programs that try to compromise your reference monitor.  Your job will be to determine where your reference monitor failed, and fix it to ensure an attacker cannot circumvent the security layer.

[[BR]]
== Common Bugs ==
 * The reference monitor needs to track the state of the information on disk, but cannot re-read it for every access (due to efficiency concerns). A common mistake is when the attacker can cause the reference monitor’s state to diverge from the underlying system’s state, especially in error conditions. For example, if the program attempts to write past the end of a file (or before the beginning of a file), the reference monitor may incorrectly update its state. As a result, the reference monitor will improperly block or allow writes since the disk contents differ. This can cause both security and accuracy issues.

 * Time-of-check-to-time-of-use (TOCTTOU) bugs and other types of race conditions are a fairly common oversight for students. Some students write test cases that attempt to trigger a race condition to exploit these problems. This can result in essentially any sort of at- tack, even infinite loops in the reference monitor in some cases.

 * Some reference monitors inappropriately share state for different files. For example, there may be a global set of state that is used to store the first two bytes. By opening multiple files, an attacker may be able to overwrite this state and cause security and accuracy issues.

 * In rare cases, a student’s reference monitor may inappropriately retain state for a file. For example, an attacker may create a file, write some data, then close and delete the file. If the attacker recreates a file with the same name, the state should be cleared. 


[[BR]]
== Sample code ==
{{{
"""
This security layer interposes on a textfile and gives it read, write, or append access.
A user can only read, write, or append to that file when that specific mode is enabled for that file.   Multiple files can be be simultaneously opened and have different modes.

Read-only: You may read the contents of a file, but not write or append.
If you attempt to read when read mode is disabled, a ValueError is raised.

Write-only: You may overwrite the contents of a file, but not append to the file.
If you attempt to do so, the file should be overwritten to the length of the file, and then writing stops.

Append-only: You may append data to the end of the file, but not overwrite 
anything that is already written.   If a write starts before the end of the
file, but continues afterward, only the data after the current end of
file should be written.

More than one mode may be enabled at once, e.g. Write and Append allows you to overwrite existing file data and append data to the end of the file.

writeat must return a ValueError if and only if both write and append are 
blocked.  readat must return a value error if and only if read is blocked.   

For efficiency purposes, you *MUST NOT* call readat inside of writeat.   It
is fine to call readat during file open if desired.


Extra credit (?): remember permissions for files after they are closed and
reopened.   This would include situations where your security layer is itself
closed and reopened (for example, if the system restarts).   You can assume
that all reads must go through your security layer and so you can add an 
additional file or modify the file format.

Note:
    This security layer uses encasementlib.repy, restrictions.default, repy.py and python
    Also you need to give it an application to run.
    This security layer never runs explicitly but instead interposes functions
    from above layers.
    
    """ 


TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class SecureFile():
  def __init__(self,file):
    # globals
    mycontext['debug'] = False   
    mycontext['read'] = False
    mycontext['write'] = False
    mycontext['append'] = False
    # local (per object) reference to the underlying file
    self.file = file

  def setread(self,enabled):
    mycontext['read'] = enabled

  def setwrite(self,enabled):
    mycontext['write'] = enabled

  def setappend(self,enabled):
    mycontext['append'] = enabled

  def readat(self,bytes,offset):
    return self.file.readat(bytes,offset)

  def writeat(self,data,offset):
    if not mycontext['write']:
      return
    if not mycontext['append']:
      return
    self.file.writeat(data,offset)


  def close(self):
    return self.file.close()

sec_file_def = {"obj-type":SecureFile,
                "name":"SecureFile",
                "setread":{TYPE:FUNC,ARGS:[bool],EXCP:Exception,RETURN:(type(None)),TARGET:SecureFile.setread},
                "setwrite":{TYPE:FUNC,ARGS:[bool],EXCP:Exception,RETURN:(type(None)),TARGET:SecureFile.setwrite},
                "setappend":{TYPE:FUNC,ARGS:[bool],EXCP:Exception,RETURN:(type(None)),TARGET:SecureFile.setappend},
                "readat":{TYPE:FUNC,ARGS:((int,long),(int,long)),EXCP:Exception,RETURN:str,TARGET:SecureFile.readat},
                "writeat":{TYPE:FUNC,ARGS:(str,(int,long)),EXCP:Exception,RETURN:(int,type(None)),TARGET:SecureFile.writeat},
                "close":{TYPE:FUNC,ARGS:None,EXCP:None,RETURN:(bool,type(None)),TARGET:SecureFile.close}
           }

def secure_openfile(filename, create):
  f = openfile(filename,create)
  return SecureFile(f)

CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:secure_openfile}

secure_dispatch_module()

}}}

=== Code Analysis ===
The above reference monitor has many flaws in it, but let's analyze one of the bugs.  According to the specifications in [wiki:EducationalAssignments/PermissionsPartOne PermissionsPartOne], if a user attempts to read from a file without read permissions, a ValueError should be raised.  In the code above, instead of raising a ValueError when readat is called without read permissions, readat will read the file and return the contents.  This is a security issue.

[[BR]]
== What to turn in? ==
----
 
 * Turn in the reference monitor that you have fixed.  The name of the reference monitor should be in the form of reference_monitor_[poly_username].repy
e.g. reference_monitor_jcappos.repy
All letters must be lowercase.
 * In addition to your reference monitor, submit a one-page PDF document, in which you discuss the different classes of bugs you had in your reference monitors and why.
What kind of bug did you experience, what caused the bug, and what did you do to fix it?