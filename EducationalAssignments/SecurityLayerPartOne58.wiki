
= Building a Security Layer =  

This assignment will help you understand security mechanisms.  The assignment guides you through the steps of creating a security layer, called a reference monitor.  A reference monitor is defined as a secure, always-used and fully-testable module that controls all software access to data objects or devices. The reference monitor verifies the nature of the request against a table of allowable access types for each process on the system.  
Once your reference monitor has been created, you will learn how to ensure it is secure.  Testing the security layer is done by running a series of  test cases that an adversary may use to circumvent your system.  This assignment is intended to prepare you for thinking about security paradigms in a functional way.  The ideas of information, security and privacy have been embedded into the steps of this assignment.    

[[TOC(inline)]]


[[BR]]
== Overview ==
----

In this assignment an attacker attempts to write "MZ" to the first two characters of a file.  If the attacker succeeds then the file will become an executable.  Your assignment is to prevent this from happening.  You will do this by adding security rules to the functions available for reading from a file and writing to a file.  If the attacker is unable to write "MZ" to the first two characters of the file, your system will remain secure.  The future of the system depends on your ability to write good secure code!  By the end of this assignment, you should have an idea of what that means. 

Three design paradigms are at work in this assignment: accuracy, efficiency, and security.

 * Accuracy: The security layer should only stop certain actions from being blocked.  All other actions should be allowed.
 * Efficiency: The security layer should use a minimum number of resources, so performance is not compromised.
 * Security: The attacker should not be able to circumvent the security layer.     
[[BR]]
=== Getting Python/Repy ===
----
Please note you must have Python2.5 or Python2.6, to complete this assignment. Instructions on how to get Python for windows can be found [InstallPythonOnWindows here].  If you are using a Mac, Python can be downloaded at [http://www.python.org/getit/mac/]. If you are using linux it is likely you already have Python, in order to verify this, simply open a terminal and type {{{python}}}.  It should load a screen which will tell you the version you are using.  

'''Note:'''If you are using windows, you will need python in your path variables.  A tutorial on adding variables to your path in windows can be found at [http://www.computerhope.com/issues/ch000549.htm]

Repy can be downloaded at [https://seattle.cs.washington.edu/geni/download/flibble/].  Once you have Repy, the [wiki:RepyTutorial] will help you understand the basics of using Repy.

=== How to get RepyV2 ===
----
Now that you have Repy, you simply need to get RepyV2.  The following command downloads RepyV2:

{{{svn co https://seattle.cs.washington.edu/svn/seattle/branches/repy_v2}}}

If the above command didn't work, you may need to download subversion.  Subversion can be downloaded at, [http://subversion.apache.org/packages.html], the windows installation is found at the bottom of the page.

Once you have RepyV2 run the command found below.  This command will initialize the downloaded files in a directory of your choosing.

{{{python preparetest.py [destdir]}}}

Finally use the command found below in order to run repy files:

{{{python repy.py restrictions.default [progname].repy}}} 

Please note Repy files end in extension `.repy`.   
[[BR]]
=== Tutorials for Repy and Python ===
----
Now that you have Repy and Python, you may need a refresher on how to use them.  The following tutorials are an excellent source of information.

 * Python tutorial: '''[http://docs.python.org/tutorial/]'''
 * Seattle tutorial: '''[https://seattle.cs.washington.edu/wiki/PythonVsRepy]'''
 * For a complete list of syntax in Repyv2 please visit: '''[wiki:FutureRepyAPI]'''
[[BR]]
= Implementation =
=== Building the security layer  ===
----
=== Assignment specifications ===
     

'''[wiki:RepyV2SecurityLayers]''' explains the syntax used to build a reference monitor.  If you are having trouble understanding the RepyV2SecurityLayers page, review dictionaries, object oriented programming, wrapping and functions.  Also the general tutorials above will aid in looking up other details about Repy.  Remember, you have no idea how the attacker will try to penetrate your security layer, so it is important that you leave nothing to chance!  Your reference monitor should try to stop every attack you can think of.  Not just one or two.  A good reference monitor will do this and incorporate the design paradigms of accuracy, efficiency and security defined above.

'''Note:''' For a full description on MZ executable files see [http://www.fileformat.info/format/exe/corion-mz.htm]
[[BR]]
=== A basic defense ===

Time to start coding!  Let's inspect a basic security layer.  

{{{
def writeat(self,data,offset):
  if data.startswith("MZ") and (offset == 0):   
    raise ValueError("Cannot start file with MZ!")
  else:
    return self.file.writeat(data,offset)

}}} 

It's important to understand that the above security layer would stop one kind of attack.  Thus if an attacker doesn't know much about file input/output this will probably stop them.  However there are a bunch of tricks that can be used in order to circumvent this security layer easily.  For instance, the above reference monitor isn't thread safe.  For an introduction to thread safety please read [http://en.wikipedia.org/wiki/Thread_safety wiki/Thread_safety].  


[[BR]]
=== Code analysis === 
Despite the simplicity of the security layer, it still follows the design principles of accuracy, efficiency, and security.  Accuracy is preserved, since only "MZ" is blocked.  If any other characters are written, the `writeat()` function executes normally.  Efficiency is preserved because the number of test cases is small.  Also security is preserved.  This is because "MZ" cannot be written as easily.  It is important to note that no security system is perfect.  It is more important to make a security system that is infeasible to break, rather than impossible to break.     

Now let's look at the structure of the code.  First off, the if-statement contains the mitigation.  If the "alarm" is not tripped then the `writeat()` function is executed normally.  Within the if-statement `data.startswith("MZ")` to check for an illegal write.  Specifically, `data` is a variable used to store information which will be written to the file.  And the method `startswith()` checks to see if the file begins with certain characters, in this case "MZ".  

The second condition, `(offset == 0)` determines the starting point of the cursor before it writes to the file.  Thus offset = 0, this means we start writing at the beginning of the file.  Similarly if offset =4, the computer would start writing to the 5th position of the file.  Starting with 0 rather than 1 has heuristic meaning in computer science.   
[[BR]]
=== Testing your security layer ===
----
In this part of the assignment you will pretend to be an attacker.  Remember the attackers objective is to write "MZ" to a file.  By understanding how the attacker thinks, you will know how to better defend against such an adversary.  Perhaps while attacking your security layer you will think of a new mitigation that should have been implemented.  Keep in mind attacks are attempts to mitigate a given security protocol.  If even one case succeeds, then your security layer has been compromised.  Thus the attack you write should include several methods of attempting to write "MZ" to a file.  An example of an attack is found below:

{{{
# Open a file
myfile=openfile("something.file",True)
 
# Attempt to write "MZ" to the file
try:
  myfile.writeat("MZ",0)
 
# It raised an Exception (as it was supposed to):
except ValueError:
  pass
 
# No Exception was raised:
else:
  log("Wrote an MZ!!!")
 
finally:
  # Close the file after our attempt.
  myfile.close()
}}}

'''Note:''' All attacks should be written in as Repy files, using the .repy extension.
[[BR]]
=== Running your security layer ===
----
Finally, type the following commands at the terminal to run your security layer with your attack program

{{{python repy.py restrictions.default encasementlib.repy [security_layer].repy [attack_program].repy }}}

Make sure you went through the "How to get RepyV2" section or this won't work!
[[BR]]
= Notes and Resources =
----
   
 * A list of command line utilities for windows can be found at '''[http://commandwindows.com/command3.htm]'''

 * A list of command line utilities for linux/apple/powershell '''[http://www.pixelbeat.org/cmdline.html]'''

 * A tutorial on how to write security layers can be found [wiki:RepyV2SecurityLayers here].  At the end of the tutorial there is a second example on '''how to test security layers'''. 

 * For a complete list of syntax in Repyv2 please visit: '''[wiki:FutureRepyAPI]'''
 
 * The following link is an excellent source for information about security layers: '''[http://www.cs.washington.edu/homes/arvind/papers/ccs10.pdf]'''

 * '''[https://seattle.cs.washington.edu/browser/seattle/branches/repy_v2/benchmarking-support/allnoopsec.py repy_v2/benchmarking-support/allnoopsec.py]''' is an empty security layer that doesn't perform any operations.

 * '''[https://seattle.cs.washington.edu/browser/seattle/branches/repy_v2/benchmarking-support/all-logsec.py repy_v2/benchmarking-support/all-logsec.py]''' is security layer that works for logging functions.

 * '''Note:''' It is possible to add multiple security layers to Repy, this may be useful for testing different mitigations separately.  This is done with the following command at the terminal:

{{{python repy.py restrictions.default encasementlib.repy [security_layer1].repy [security_layer2].repy [security_layer3].repy [program].repy}}}

 * In repy log replaces print from python.  This may be helpful when testing if Repy installed correctly.
[[BR]]
= Extra Credit =
----
For extra credit, make a second reference monitor which stops an attacker from writing 'p0wnd' anywhere in a file.  You should also test the security layer by trying to write 'p0wnd' anywhere in the file.  

'''Hint:''' Since this string can be written anywhere in the file, there will most likely be more test cases.  
[[BR]]
= What to turn in? =
----

 * Turn in a repy file called reference_monitor_[ name or id number].repy
 * For extra credit turn in a second repy file called extra_credit_[ name or id number].repy