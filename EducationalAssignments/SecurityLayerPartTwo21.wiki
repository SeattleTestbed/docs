
= Security layer testing and penetration =  

In this assignment you will learn how to attack a reference monitor.  The reference monitor you will be testing uses the security layer framework (encasement library, etc.) for the Seattle testbed.  It is possible to do this assignment separately however it is recommended that this assignment be you completed after [wiki:EducationalAssignments/SecurityLayerPartOne SecurityLayerPartOne].  Either way you should already have a working security layer or access to one.  Testing the security layer is done by running a series of test cases that an adversary may use to circumvent your system. This assignment is intended to prepare you for thinking about security paradigms in a functional way. The ideas of information, security and privacy have been embedded into the steps of this assignment.

[[TOC(inline)]]
[[BR]]
== Overview ==
----
In this assignment you are a tester.  You have been sent a bunch of reference monitors that need testing before they are deployed.  Your job will be to ensure an attacker cannot circumvent these security layers.  In order to do this, you will attempt to write "MZ" to the first two characters of a file.  If you are able to do so, then the security layer is not secure. The future of the system depends on your ability to test code thoroughly!   

Three design paradigms are at work in this assignment: accuracy, efficiency, and security.

Accuracy: The security layer should only stop certain actions from being blocked. All other actions should be allowed.
Efficiency: The security layer should use a minimum number of resources, so performance is not compromised.
Security: The attacker should not be able to circumvent the security layer.

After testing, write a report on your findings, including all attacks that succeeded and failed.  The write up should include a critique of what was done well or done poorly.  In effect, if the design paradigms stated above were followed well, then the security layer was well written.  If one or more of the design concepts listed above was not present, then that should be reflected in the write up.  This assignment will give you the basics of code auditing and code analysis.  

Note: For a full description on MZ executable files see  http://www.fileformat.info/format/exe/corion-mz.htm 
     

[[BR]]
== Prerequisites ==

This assignment assumes you have Python2.5 or Python2.6, Repy and RepyV2 installed on your computer.  If you don't already have them please go to [wiki:EducationalAssignments/SecurityLayerPartOne#GettingPythonRepy SecurityLayerPartOne] for a tutorial on how to get them.  
[[BR]]
=== Helpful links ===
----
The following links will aid students in becoming comfortable with Python, Repy and seattle:
 * Python tutorial: '''[http://docs.python.org/tutorial/]'''
 * Seattle tutorial: '''[https://seattle.cs.washington.edu/wiki/PythonVsRepy]'''
 * list of RepyV2 syntax: '''[wiki:FutureRepyAPI]'''
[[BR]]
== Testing security layers ==
----
=== Hypothesis, test case, counter example ===

The goal of a good tester is to test hypotheses.  A hypothesis is just a scientific way of asking a question.  The hypothesis of this assignment is "This security layer is well designed."  The questions you will ask when running your test cases will always be the same
       
 * "Is this reference monitor secure?"
 
 * "Does this reference monitor hamper performance?"

 * "Does this reference monitor prevent actions that should be allowed?"

Notice that these questions are parallels of the security paradigms: security, efficiency and accuracy, respectively.  

If we can find a case where the hypothesis is false, then the security layer is not secure.  Such a case is referred to as a counter example.  Hence all test cases should be designed to test for these three types of flaws.

[[BR]]
=== Examples of tests ===
Test cases are briefly described in [wiki:EducationalAssignments/SecurityLayerPartOne SecurityLayerPartOne] and [wiki:RepyV2SecurityLayers].  However, these examples may not be detailed enough, hence listed here are a series of examples of test cases:
==== Test case 1 ====
{{{
# Open a file
myfile=openfile("something.file",True)
 
# Attempt to write "MZ" to the file
try:
  myfile.writeat("MZ",0)
 
# It raised an Exception (as it was supposed to):
except ValueError:
  pass
 
# No Exception was raised:
else:
  log("Wrote an MZ!!!")
 
finally:
  # Close the file after our attempt.
  myfile.close()
}}}
==== Code analysis ====
In this case we are verifying the security of the reference monitor.  This code attempts to write "MZ" to the file directly. First the file is opened using myfile=openfile("something.file",True). Next myfile.writeat("MZ",0) tries to write "MZ" to the file. The 0 refers to an offset of zero. The try: statement tells the program to "try" this case. Notice that the except is executed if an error is raised. If the security layer fails the test then the else statement is executed. The finally: statement will always run, closing the file.  
==== Test case 2 ====
{{{
try:
  text = openfile(filename, True)
  text.writeat("A",0)
except Exception:
  count = count + 1
  log("ERROR #" + str(count) + ": Case 1 - Throws error for file with just an 'A'. This should be legal\n")
else:
  pass
finally:
  text.close()
  removefile(filename)
}}}
[[BR]]
==== Code Analysis ====
In this case, we are verifying the accuracy of the security layer.  This is done in the `text.writeat("A",0)` statement.  The test case, tries to write a character that should be allowed to the file.  If "A" cannot be written the reference monitor fails the usability test.  Notice that Exception statement counts the number of errors logged.  This is done with the following two lines of code:
{{{
 count = count + 1
  log("ERROR #" + str(count) + ": Case 1 - Throws error for file with just an 'A'. This should be legal\n")
}}}
The count keeps track of the number of reference monitors that failed.  Thus this test case is intended for running multiple reference monitors in succession.  
==== Test case 3 ====
{{{
try:
  text = openfile(filename, True)
  text.writeat("XZ",0)
  text.writeat("M",0)
except Exception:
  pass
else:
  count = count + 1
  log("ERROR #" + str(count) + ": Case " + str(case) + ": MANAGED AN MZ!\n")
finally:
  text.close()
  removefile(filename)
}}} 
[[BR]]
==== Code Analysis ====
In this code we are doing something tricky.  Rather than writing "M" and then "Z", we try to write a place holder character first and then go back and write "M".  This code is an example of something a creative attacker may do.  It takes advantage of reference monitors that only look for "MZ", written together.  Thus unless your reference monitor blocks for "M" in the first position and "Z" for the second position, your reference monitor will fail this attack. 
[[BR]]
== Notes and Resources ==
----
   
 * The following link is an excellent source for information about security layers: http://www.cs.washington.edu/homes/justinc/papers/cappos_seattle_ccs_10.pdf

 * [https://seattle.cs.washington.edu/browser/seattle/branches/repy_v2/benchmarking-support/allnoopsec.py repy_v2/benchmarking-support/allnoopsec.py] is an empty security layer that doesn't perform any operations.

 * [https://seattle.cs.washington.edu/browser/seattle/branches/repy_v2/benchmarking-support/all-logsec.py repy_v2/benchmarking-support/all-logsec.py] is security layer that performs logging functions.

 * In repy 'log' replaces 'print' from python.  Many students find this to be a stumbling block.


[[BR]]
== Extra Credit ==
----
Students can be provided with a second set of reference monitors.  These attempt to prevent students from writing 'p0wnd' to a file. 
[[BR]]
== What to turn in? ==
----
 
 * Turn in the test cases used to attack a given reference monitor.  
 * Turn in the write up of each reference monitor attacked, with critique of the reference monitor.  Critique should include all test cases that worked.
 * Write up for 'p0wnd' reference monitors.