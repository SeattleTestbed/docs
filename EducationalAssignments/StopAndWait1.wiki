= Stop-and-Wait Protocol =
----
[[TOC(inline)]]
----

[[BR]]
== Defined ==
----

You will implement a reliable datagram protocol using the stop-and-wait (also known as alternating bit) protocol.

A message is considered sent once it has been delivered and acknowledged. An unacknowledged message is resent after a timeout. After a finite number of resends, an error is reported.

[[BR]]
== Implement ==
----

Implement the stop-and-wait protocol using the recvmess and sendmess Seattle calls. Your protocol should run as a library that is included into a client program and a server program. It should extend recvmess and sendmess with three new routines:

{{{
#!python     
     reliable_recvmess(srcip, srcport, function) 

     reliable_sendmess(destip, destport, message, srcip=None, srcport=None)   # Notice that just like in sendmess, the srcip and srcport arguments are optional

     reliable_config(retries, timeoutinms)
}}}

These first two routines are modeled on the existing sendmess and recvmess functions. See the RepyTutorial or Repy library API for more information.

reliable_sendmess should return the number of characters sent and raise an Exception if an error occurred.   

The third routine allows you to parametrize the number of retransmissions that should occur when appropriate acknowledgments are not forthcoming in a window of timeoutms milliseconds. By default, your protocol should retransmit 4 times with a timeout of 10 milliseconds. A timeout of 0 ms disables retransmissions and causes reliable_send to never report an unacknowledged datagram. A retries of 0 also disables retransmissions, but delays at least timeoutms before returning. Datagrams are never reported as lost.

You should put your protocol implementation in a file called reliable.repy and include it in a client and server program. Your main client program should be called "reliable_client.repy" and your server program should be called "reliable_server.repy." Each is to be executed from different computers using seash:

on client run swclient.repy inputfile host portnum maxdgramsize nretries timeoutms
on server run swserver.repy outfile portnum  

You may find it helpful to run both on the same computer using local code execution during development.   Additionally, you should test on LAN nodes before moving to WAN nodes.

The client reads data from inputfile and sends it to the server. The client's non-optional arguments indicate the target address (host, portnum), the maximum allowable size of reliable datagram, the number of retries for each packet, and the timeout in milliseconds that should be used to clock a retransmission.

The server logs the data it receives to outfile. The server's portnum indicates on which port the server should receive messages. 

[[BR]]
== Evaluate ==
----

First, measure the underlying reliability of the network by disabling retransmissions and measuring loss (the difference between the number of packets sent on the client and the number received on the server) as a function of the timeout. Use timeouts ranging from 0ms to 2000ms, and datagram sizes of 512 bytes and 8k. Show your measurements on a LOSS graph of packet loss as a function of timeout with one line for each datagram size.   Try this both for LAN and WAN nodes and plot them as different lines on the same graph.

Second, measure throughput as a function of timeout for 5 different datagram sizes: 10 bytes, 512 bytes, 2k, 8k, and 64k. To measure throughput, you should copy a large file from the client to the server to ensure that your timing covers many round trips. Consider timeouts ranging from small to medium to large (10, 50, 500 ms). Show your measurements in two graphs: Include a THROUGHPUT graph with one line for each of the different datagram sizes where the x-axis is your timeout, and the y-axis is your measured throughput. Include a RETRANSMISSION graph, where the y-axis is the total number of retransmissions that the client performed.

Include a thoughtful discussion and analysis of the results of no more than one page. Don't forget to make clear the description of the experimental setup (eg, machine IP addresses, network speed, etc.).

[[BR]]
== Notes ==
----

 * Do this assignment in parts. First, get the protocol working. Then, worry about making the measurements. Go from local testing to LAN to WAN.
 * Your programs can use 'print' to create logging, debugging, or error messages.   Use this information to help you debug!
 * IMPORTANT: If you run the client and server on the same computer, you will see substantially different failure/lost packet behavior than if you run them on different computers. This is because the underlying OS may actually take care to slow down the sender if the receiver's buffer is full. On separate computers, there's no way for it to do this.

 * You will need to define a message structure that includes a header field for your alternating bit protocol, and a payload field, which contains the actual data that the protocol is supposed to deliver reliably.
 * The maximum size of a UDP datagram is 64k. (What happens if you try to exceed it?)

[[BR]]
== What to turn in? ==
----

Turn in a tar file called "reliable.tar" that contains a directory called Reliable. This directory contains your source code, a file called results.pdf that contains your evaluation, and a file called README that contains any information we might need in evaluating your solution. For example, bugs and limitations should be included in the README. 
