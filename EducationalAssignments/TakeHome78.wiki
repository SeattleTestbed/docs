= Seattle Take Home Assignment =

The purpose of this assignment is to illustrate several important networking concepts by measuring the connectivity between computers spread around the Internet.  For this task we will be using Seattle, and in the first part of this assignment you will familiarize yourself with the Seattle toolkit.  Once you are comfortable with the toolkit, we will run an all-pairs-ping on computers distributed around the world.   The goal of running the all-pairs-ping is to observe non-transitive connectivity (when two computers cannot communicate, but they can both communicate with a third computer).   Following this, we will set up one-hop detour routing to circumvent non-transitive connectivity to allow the computers to communicate through the intermediate node.   The final part of the assignment investigates whether or not a computer is behind a NAT (network address translator) and illustrates the practical issues with communicating with a NATed node.   

This assignment consists of 11 steps and should take around 60 minutes to complete.   Let's begin!

----
[[TOC(inline)]]
----
[[BR]]
= Using the GENI website and the Seattle shell =
[[BR]]
== Step 1 : Adding resources ==
----

Login to the Seattle [https://seattle.cs.washington.edu/geni/ GENI website].   If you don't already have an account (i.e. your instructor or TA gave you one) go ahead and register for an account.   Click on the My Vessels tab and you'll see that you currently aren't using any resources. In the right pane, select LAN and choose 10 computers, and click "Get".  After a few seconds, you will see that ten computers have been added for you to use.

[[BR]]
== Step 2 : Running Seattle shell ==
----

Now click on the Profile tab, and download the toolkit linked from this page.   The zip file includes all of the files you need to do the take home assignment (files like allpairsping.repy).   Click to download your Private Key and Public Key (save the files to the directory with seash).  This will give you the credentials necessary to run your programs on the ten computers now at your disposal.     

 * On Windows do start, run, cmd and then cd to the folder where you downloaded the toolkit.   

 * On Mac / Linux, open a terminal window and change to the directory where you downloaded the toolkit.   

Then type "python seash.py" or "seash.py" (if these fail, you may need to [http://www.python.org download python]).   You will see a prompt like " !> " once the seash shell starts.  The seash shell will allow you to easily run programs across multiple computers at the same time.

[[BR]]
== Step 3 : Browsing your resources ==
----

Now lets add the credentials you just downloaded from the website into seash.  Type the following command at the prompt, '''(replacing ''username'' with the user name you used to log into the Seattle GENI website)'''

{{{
#!python
!> loadkeys username
}}}

Then, type

{{{
#!python
!> as username
}}}

This will change the prompt to " username@ !> " to indicate that by default, you are now acting with your credentials.  Next, tell the shell to search for vessels you control by typing browse:

{{{
#!python
username@ !> browse
}}}

This will search for vessels that you control (so that the shell can locate them).  You should see several vessels added (if not, you should wait a few minutes and then try again, as sometimes it takes
time for the vessel information to propagate).  The output from browse command will look something like the following:

{{{
#!python
username@ !> browse            
Added targets: %1(IP:port:vesselname), %2(IP:port:vesselname), %3(IP:port:vesselname), ...
Added group 'browsegood' with X targets      
}}}

This tells you that the seash has discovered (at least some of) the computers you selected and verified that they are ready to run your code.

[[BR]]
== Step 4 : Hello World on a single computer ==
----

In the above print-out response to the browse command, the %1, %2, %3, etc are an easy way to refer to a computer.  For example, we can run a "hello world" program on computer %1 by typing:

{{{
#!python
username@ !> on %1 run helloworld.py
}}}

To see the results of this command on computer %1 we would type:

{{{
#!python
username@ !> on %1 show log
}}}

This shows you the output from the %1 computer, which should say "Hello World". If you're going to deal with a specific computer over and over, then constantly typing "on computername" before every command can be very annoying.   You can instead set the default target by simply typing

{{{
#!python
username@ !> on %1
}}}

and hitting enter.  This will change your prompt to be:

{{{
#!python
username@%1 !>
}}}

This indicates that you're acting as your username and you're acting on %1 (unless otherwise specified).  Try typing

{{{
#!python
username@%1 !> run helloworld.py
}}}

and then type


{{{
#!python
username@%1 !> show log
}}}

You'll see two "Hello World" lines now because you've run the program twice.  

[[BR]]
== Step 5 : Hello World on many computers ==
----

Now we'd like to run commands on more than one computer at a time.  To do this, we'll use the result of our previous browse command as a group.  If you recall the output from the command said "Added group 'browsegood' with X targets".  This means that the nodes it found the last time you browsed are now in a group called browsegood.   Type

{{{
#!python
username@%1 !> on browsegood
}}}

and you'll see the prompt:

{{{
#!python
username@browsegood !>
}}}

Now type two commands:

{{{
#!python
username@browsegood !> run helloworld.py
username@browsegood !> show log
}}}

You'll see that the command was run on a bunch of different computers.  Let's add the computers in browsegood to a group with a more convenient name by typing

{{{
#!python
username@browsegood !> add browsegood to LAN
}}}

and then type

{{{
#!python
username@browsegood !> on LAN
}}}

to use the LAN group.

[[BR]]
== Step 6 : Stopping programs ==
----

We'll cover one last function of the shell before we start measuring network connectivity: stopping a running program. Some programs don't exit immediately like the hello world program.   At your " username@LAN !> " prompt type

{{{
#!python
username@LAN !> run infloop.py
}}}

This deploys a program that waits in an infinite loop.   Now let's try to run helloworld.py while the previous program is running.

{{{
#!python
username@LAN !> run helloworld.py
}}}

The result is that you'll see {{{ Failure 'Node Manager error 'Vessel has already been started'' on  ... }}} for each of the nodes.   The reason is that the shell doesn't run the program since the infinite loop program is already running.  To stop the infloop program type

{{{
#!python
username@LAN !> stop
}}}

You'll see a message noting that the program has stopped on your nodes.   To check the status of the program you deployed you can type "list" and it will show you if the program is running (Started), you stopped while it was running (Stopped), or stopped on its own (Terminated).   You may also have some vessels that have not been used (Fresh) or are in an error state (Stale).  

It is common when using lots of distributed computers to have a few of them not function correctly, so it is normal to have a few in the wrong state after a command.   You can usually continue the series of operations and ignore the failed vessels or else retry the operation on the failed vessels.

[[BR]]
= Measuring Connectivity =
[[BR]]
== Step 7 : Sending UDP pings manually ==
----

Now we're ready to measure the connectivity between computers!   The first thing we need to do is check which UDP port we should use.   For convenience, Seattle GENI assigns the same UDP port to all of a user's vessels. 

To figure out which port you should use, log into the Seattle GENI website and on the Profile page, look to see what port number it indicates.   '''You should write down your port number as you'll need this value repeatedly.'''

We'll measure connectivity by sending UDP pings from a target computer to a destination.  At the " username@LAN !> " prompt type

{{{
#!python
username@LAN !> list
}}}

This will allow you to see the IP of %2.  Now type (replacing ''GENIport'' with your port number)

{{{
#!python
username@LAN !> on %2 run udppingserver.py GENIport
}}}


You can ping from %1 to %2 by typing the line listed below.   Replace ''IP_of_%2'' with the IP address of computer %2 as shown by your previous list command.   It will be something like 1.2.3.4.   Also replace ''GENIport'' with your port number.

{{{
#!python
username@LAN !> on %1 run udpping.py IP_of_%2 GENIport
}}}


Then if you type

{{{
#!python
username@LAN !> on %1 show log
}}}

You will see that %1 was able to send UDP ping packets to %2. You can also type

{{{
#!python
username@LAN !> on %2 show log
}}}


to see that %2 received the ping packets. Okay, now stop the udppingserver on computer %2 by typing

{{{
#!python
username@LAN !> on %2 stop
}}}

[[BR]]
== Step 8 : Sending pings between a group of computers ==
----

Instead of manually pinging between each of the computers in the LAN group, you can run a program that does an UDP ping between all of the computers in a group.  If your prompt isn't " username@LAN !> " type: "on LAN" to reset it.   First we need to generate a list of the IP addresses of the nodes. Type

{{{
#!python
username@LAN !> show ip
}}}

and then write the IP addresses into a file called "neighboriplist.txt" on your computer.   The IP addresses should be written one line at a time like this:
{{{
1.2.3.4
100.200.100.1
123.45.67.89
}}}

Save the file to the directory where seash.py is running.   Now type

{{{
#!python
username@LAN !> upload neighboriplist.txt
}}}

This adds the file with nodes to ping to the all the computers in the LAN group. Now type (substituting your port for ''GENIport'')

{{{
#!python
username@LAN !> run allpairsping.py GENIport
}}}

You can see the result of all of the nodes pinging each other by opening your web browser and pointing it at one of the computers in your neighboriplist:GENIport.   For example, if 1.2.3.4 is a computer in your list, and your port is 54321 then open your browser and in the address bar type "http://1.2.3.4:54321".   If the node you chose doesn't respond, try another node.

Each node reports a matrix showing its connectivity. You will see that every node is able to ping every other node (i.e. the matrix is full of latencies).   If a row is completely missing, you'll notice the corresponding column is likely empty as well.   This indicates that the node you are looking at is mostly likely down.   

If you refresh the page occasionally, you'll see that the latencies change as the nodes periodically update.

[[BR]]
== Step 9 : Pinging behavior in the wide-area ==
----

Now we'll run the all pairs ping on computers distributed around the world. Log back into the Seattle GENI website. You will see the nodes that you're using are listed under the My Vessels tab. Click on "remove all nodes".  Now that you've given back your resources, you can add other resources. Click on the "add resources" button, under the My Vessels tab, click on WAN (instead of LAN), choose 10 computers, and click "Get".   Now you'll see that ten computers / vessels around the world have been added for you to use.

Back in the shell, type

{{{
#!python
username@LAN !> browse
}}}


You will see that the WAN nodes are now detected.  For convenience, let's add the nodes to a group called WAN by typing

{{{
#!python
username@LAN !> add browsegood to WAN
}}}

If you have only a few nodes, wait a few minutes, then do {{{browse}}} and {{{add browsegood to WAN}}} again.  Now type

{{{
#!python
username@LAN !> on WAN
}}}

and the prompt should now say "username@WAN !>".  Now let's examine the all pairs connectivity again. First type

{{{
#!python
username@WAN !> show ip
}}}

and as before write the IP addresses you see to a local file called 'neighboriplist.txt'. Then type

{{{
#!python
username@WAN !> upload neighboriplist.txt
}}}

Then type

{{{
#!python
username@WAN !> run allpairsping.py GENIport
}}}

Finally, check the result of all of the nodes pinging each other by opening your web browser and pointing it at one of the computers in your neighboriplist:GENIport.   If you can't see this from a specific node, try to refresh a few times.   You should try to load the webpage from a different computer if the problem persists. 
{{{
#!python
username@WAN !> show log
}}}

What do you observe? Is the connectivity graph complete and do all of the nodes agree on which nodes are alive?  As before, a column which is empty and has a corresponding empty row indicates a down node.   Do you see any nodes that cannot connect to each other but can contact other nodes?   If so you'll see something like the image below.

[[Image(nontransitiveconnectivity.jpeg)]]

Notice that the two computers whose IP addresses are circled cannot talk to each other, however they can talk to other nodes.   If you don't see this, then you can either continue to the next step and pretend you had nodes that could not communicate or you can get a new group of nodes and try again.   If you decide to try again, you should use a different group name than WAN (like WAN2) to refer to the nodes so that the shell doesn't try to contact the nodes you aren't using any more.



Stop the allpairsping on the WAN nodes so we can focus on the nodes with non-transitive connectivity.
{{{
#!python
username@WAN !> stop
}}}

[[BR]]
== Step 10 : Packet forwarding ==
----

Now that you have a connectivity matrix where there are two nodes that can't communicate, notice that other computers can communicate with these nodes, but they can't contact each other directly. This is an effect called "non-transitive connectivity".   Non-transitive connectivity usually happens because of configuration errors or convergence failures in the BGP protocol.   

Write down the IP addresses of the two computers that cannot directly communicate and also write down the IP of an node that can communicate with both nodes.   To get packets to flow from two nodes that can't communicate, we can have a node in the middle forward packets.   Find the %number of the node who can talk to both nodes.   Then type (replacing ''node1IP'', ''node2IP'', and ''GENIport'')

{{{
#!python
username@WAN !> on %number run udpforward.py node1IP node2IP GENIport
}}}

Now start the udppingserver on node1 by doing (replacing ''%node1'' with the node number for node1 and ''GENIport'')

{{{
#!python
username@WAN !> on %node1 run udppingserver.py GENIport
}}}


To send a ping packet, run: (replacing ''%node2'' with the node number for node2, ''intermediateIP'' with the IP address of the computer that can talk to both nodes, and ''GENIport'')

{{{
#!python
username@WAN !> on %node2 run udpping.py intermediateIP GENIport
}}}

You can look at the log on node1 or node2 to see that the packets were delivered (using the "show log" command).   However, on node2 you'll notice that the ping packets came from the intermediate IP address instead of node1.   You'll also see that node1 got the response from the intermediate node (instead of directly from node2).

{{{
#!python
username@WAN !> on %node2 show log
}}}


{{{
#!python
username@WAN !> on %node1 show log
}}}


[[BR]]
== Step 11 : Observed behavior from your home computer ==
----

The next part of the assignment is best performed from your home computer.  It will try to detect the presence of a network address translator (NAT); a feature that many wireless modems and home routers have.   

Install Seattle on your home computer by logging into your Seattle GENI account.   Click on the Donations tab.   On the right hand side, you'll see installers available for Windows / Mac / Linux.   Click on the appropriate type for your home computer.   After downloading the installer, uncompress / unzip it.

 * On Windows do start, run, cmd and then cd to the folder where you uncompressed the installer.   Run install.bat

 * On Mac / Linux, open a terminal window and change to the directory where you uncompressed the installer. Run ./install.sh

You also will need to download the toolkit and keys like you previously did in Step 2.   Copy all of the files from the toolkit into the directory where you uncompressed the installer.   Change so that your terminal window is in the directory where you unpacked the installer.   

Alternatively, if you can't run Seattle on your home computer, you can also obtain a computer using Seattle GENI.   If you use Seattle GENI, choose a node of type NAT.   You will need to change the below directions so that you use seash to run commands on the NAT node instead of running the programs locally.   

Once you have Seattle installed locally or have obtained a NAT node using Seattle GENI, run the seash shell from a terminal by typing "python seash.py" or "seash.py".  Load your keys by typing (replacing ''username'' with your GENI user name)

{{{
#!python
!> loadkeys username
}}}

Then type

{{{
#!python
!> as username
}}}

and you'll see the prompt changes to "username@ !>". 

Check on the Seattle GENI website to see if you still have nodes to use.   If not, click on the add resources button, under the Quick Start tab, click on WAN, choose 1 computers, and click "Go!".  

Now under your shell at the " username@ !>" prompt, type

{{{
#!python
username@ !> browse
}}}

You should see the IP of at least one WAN node. Write down the IP address of the WAN node.   Write down the IP address of your computer (you can obtain this by typing "ipconfig" at a prompt in Windows, by typing "hostname -i" on Linux, or by typing either {{{"host `hostname`"}}} or {{{ifconfig}}} on a Mac).   Start the pingserver on the WAN node with the following command in seash (replacing ''GENIport'' with your port number):
{{{
#!python
username@ !> on %WANnode run udppingserver.py GENIport
}}}

Ping the WAN node from your local computer by typing the following command at a terminal window (not in seash!).   Remember to replace ''WANIP'' with the WAN node's IP address and ''GENIport'' with your port.   If you are running this on a remote system, you should use seash and replace the {{{python repy.py restrictions.allowallports}}} portion of the command with 'run'.


{{{
python repy.py restrictions.allowallports udpping.py WANIP GENIport
}}}



Now look at the log of the WAN computer.   

{{{
#!python
username@ !> on %WANnode show log
}}}

Does it have your computer's IP address listed as the source address?  If not, you have network address translation changing your IP address.

Now try to ping in the opposite direction.  First, stop the pingserver on the WAN node 

{{{
#!python
username@ !> on %WANnode stop
}}}

Then start the ping server on the local computer by running the following command from the terminal window (not in seash!).   Once again, if you are running this on a remote system, you should use seash and replace the {{{python repy.py restrictions.allowallports}}} portion of the command with 'run'.


{{{
python repy.py restrictions.allowallports udppingserver.py GENIport
}}}

Next ping the local node from the WAN node

{{{
#!python
username@ !> on %WANnode run udpping.py localIP GENIport
}}}



Then check the log by running 

{{{
#!python
username@ !> on %WANnode show log
}}}

Did it work?

If you have a NAT device on your home network your computer can initiate connections out, but the packets will be translated so they have a different IP address than the local IP.   This also typically means that nodes on the outside of the NAT cannot initiate connections to inside nodes (which is why the WAN node could not ping your computer).   

If you have a firewall, your home computer may not be able to receive incoming connections or packets.   However, a non-NAT firewall will not change your IP address.   


== Conclusion ==

That's all for the take home assignment.   You've just seen non-transitive connectivity in practice, used one hop detour routing to circumvent it, and also determined if your computer is behind a NAT.   We hope this has been informative and enjoyable.   If you have any comments or questions please contact justinc -AT- cs -DOT- washington -DOT- edu
