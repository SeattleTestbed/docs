= Stop-and-Wait Protocol =
In this assignment, you will implement a reliable datagram protocol using the [http://en.wikipedia.org/wiki/Stop-and-wait_ARQ stop-and-wait] (also known as [http://en.wikipedia.org/wiki/Alternating_bit_protocol alternating bit]) protocol.  You will write client and server programs that communicate using your library.  The server will listen for messages and send back acknowledgments.  The client will send messages and listen for acknowledgments.  The client will consider a message delivered once it receives an acknowledgment and resend an unacknowledged message after a timeout.  After a finite number of resent messages, the client will give up and report an error.
----
[[TOC(inline)]]
----
[[BR]]
== Repy API ==
----
You will implement your stop-and-wait protocol over Repy's UDP functions.  Specifically, you must extend the recvmess and sendmess routines:
{{{
#!python   
recvmess(localip, localport, function) # Returns an event handler
sendmess(desthost, destport, message, localip=None, localport=None) # Returns the bytes sent
}}}
See the [https://seattle.cs.washington.edu/wiki/RepyLibrary Repy Library Reference] for more details.

[[BR]]
== The Reliable API ==
----
Your protocol should run as a library that is included into a client and a server program. It should extend recvmess and sendmess with three new routines:
{{{
#!python     
reliable_recvmess(srcip, srcport, function) # Returns an event handler
reliable_sendmess(destip, destport, message, srcip=None, srcport=None) # Returns the bytes sent
reliable_config(maxdgramsize, retries, timeoutinms) # No return
}}}
These first two routines are modeled on the existing sendmess and recvmess functions.  The function reliable_recvmess should return the handle to the Repy recvmess event.  The function reliable_sendmess should return the number of characters(bytes) sent and raise a TimeoutError Exception.

The third routine allows you to parametrize the number of retransmissions that should occur when appropriate acknowledgments are not forthcoming in a window of timeoutms milliseconds. By default, your protocol should retransmit 4 times with a timeout of 10 milliseconds. A timeout of 0 ms disables retransmissions and causes reliable_sendmess to never report an unacknowledged datagram. A retries of 0 also disables retransmissions, but delays at least timeoutms before returning. Datagrams are never reported as lost.

[[BR]]
== Step 1 : Implementation ==
----

Implement the stop-and-wait protocol using the recvmess and sendmess Seattle calls. The client will read a data file and send the data to the computer running the server program. The packet size of the data is defined by the user. When the server receives a packet of data, it sends an acknowledgment message to the client. If the acknowledgment message is not received in a user defined amount of miliseconds, the message is resent a user defined number of times until the program moves on to the next packet of data. The server program outputs the data received to a file.

Your protocol should run as a library that is included into a client program and a server program. It should extend recvmess and sendmess with three new routines:

{{{
#!python     
reliable_recvmess(srcip, srcport, function) 

# Notice that just like in sendmess, the srcip and srcport arguments are optional
reliable_sendmess(destip, destport, message, srcip=None, srcport=None)

reliable_config(retries, timeoutinms)
}}}

These first two routines are modeled on the existing sendmess and recvmess functions. See the RepyTutorial or Repy library API for more information.

reliable_sendmess should return the number of characters sent and raise an Exception if an error occurred.   

The third routine allows you to parametrize the number of retransmissions that should occur when appropriate acknowledgments are not forthcoming in a window of timeoutms milliseconds. By default, your protocol should retransmit 4 times with a timeout of 10 milliseconds. A timeout of 0 ms disables retransmissions and causes reliable_sendmess to never report an unacknowledged datagram. A retries of 0 also disables retransmissions, but delays at least timeoutms before returning. Datagrams are never reported as lost.

You should put your protocol implementation in a file called reliable.repy and include it in the client and server programs. This can be done by putting "include reliable.repy" at the top of your client and server programs. However, you will need to run your server and client code through the repy pre-processor (repypp.py) to set up your code. However, you do not need to run your reliable.repy file through the pre-processor.  For example, to pre-process foo.repy to foo2.repy:
{{{
python repypp.py foo.repy foo2.repy
}}}

Your main client program should be called "reliable_client.repy" and your server program should be called "reliable_server.repy." Each is to be executed from different computers using seash:
{{{
on client run reliable_client.repy inputfile host portnum maxdgramsize nretries timeoutms

on server run reliable_server.repy outfile portnum  
}}}

You may find it helpful to run both on the same computer using local code execution during development.   Additionally, you should test on LAN nodes before moving to WAN nodes.

The client reads data from inputfile and sends it to the server. The client's non-optional arguments indicate the target address (host, portnum), the maximum allowable size of reliable datagram, the number of retries for each packet, and the timeout in milliseconds that should be used to clock a retransmission.

The server logs the data it receives to outfile. The server's portnum indicates on which port the server should receive messages. 

[[BR]]
== Step 2 : Evaluation ==
----

First, measure the underlying reliability of the network by disabling retransmissions and measuring loss (the difference between the number of packets sent on the client and the number received on the server) as a function of the timeout. Use timeouts ranging from 0ms to 2000ms, and datagram sizes of 512 bytes and 8k. Show your measurements on a LOSS graph of packet loss as a function of timeout with one line for each datagram size.   Try this both for LAN and WAN nodes and plot them as different lines on the same graph.

Second, measure throughput as a function of timeout for 5 different datagram sizes: 10 bytes, 512 bytes, 2k, 8k, and 64k. To measure throughput, you should copy a large file from the client to the server to ensure that your timing covers many round trips. Consider timeouts ranging from small to medium to large (10, 50, 500 ms). Show your measurements in two graphs: Include a THROUGHPUT graph with one line for each of the different datagram sizes where the x-axis is your timeout, and the y-axis is your measured throughput. Include a RETRANSMISSION graph, where the y-axis is the total number of retransmissions that the client performed.

Include a thoughtful discussion and analysis of the results of no more than one page. Don't forget to make clear the description of the experimental setup (eg, machine IP addresses, network speed, etc.).

[[BR]]
== Notes ==
----

 * Your code should gracefully handle duplicate acks and data packets. That is, it should ignore duplicate packets, and possibly use them as an indicator of the other endpoint's state.

 * Callbacks triggered by socket events run in the context of another thread. This means that the programmer (i.e. you!) are responsible for maintaining consistency and atomicity of access to your variables. The easiest way to accomplish this is to use locks, acquiring them before regions that require atomic access, and releasing them afterward. See the getlock() function described in the RepyLibrary for more information.

 * Your reliable server will additionally need a final timeout after which the reliable server will exit. This is so that you will not overload your machine with forked processes unknowingly during testing.

 * Note that the client and the server cannot run locally on the same port. If they are set to run on the same IP address and port number, then their UDP connections interfere. One way to solve this is to use two different static ports for the server and the client.

 * Do this assignment in parts. First, get the protocol working. Then, worry about making the measurements. Go from local testing to LAN to WAN.

 * Your programs can use 'print' to create logging, debugging, or error messages. Use this information to help you debug!

 * IMPORTANT: If you run the client and server on the same computer, you will see substantially different failure/lost packet behavior than if you run them on different computers. This is because the underlying OS may actually take care to slow down the sender if the receiver's buffer is full. On separate computers, there's no way for it to do this.

 * You will need to define a message structure that includes a header field for your alternating bit protocol, and a payload field, which contains the actual data that the protocol is supposed to deliver reliably.

 * The maximum size of a UDP datagram is 64k. (What happens if you try to exceed it?)

[[BR]]
== What to turn in? ==
----

Turn in a tar file called "reliable.tar" that contains a directory called Reliable. This directory contains your source code, a file called results.pdf that contains your evaluation, and a file called README that contains any information we might need in evaluating your solution. For example, bugs and limitations should be included in the README. 
