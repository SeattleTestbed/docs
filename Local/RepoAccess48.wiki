= Github and Git =
Seattle's code base and ticket system are hosted on [https://github.com/ Github].
Github is a collaboration, code review, and code management web application that is popularly
used in open source projects and by distributed developers.  Contributions to Seattle 
are expected to be [https://help.github.com/articles/using-pull-requests pull requests]
to repositories of the [https://github.com/SeattleTestbed SeattleTestbed] organization.

Git is a free and open source distributed [http://en.wikipedia.org/wiki/Version_control_system VCS]
(Version Control System).  A VCS helps manage changes made to files.  Users run Git on their local
computers to upload changes to remote repositories and files hosted on Github. Users edit files locally and then upload their changes to Github. The following document covers the basics of using Git and submitting a pull request to one of Seattle's Github repositories.

[[TOC(inline)]]



== Git Installation ==
Github provides platform-specific installers for Mac and Windows users.  Installation instructions
are provided in the links below for each supported platform.

[https://mac.github.com Mac]

[https://windows.github.com Windows]

[http://git-scm.com/download/linux Linux]


Linux users may install Git using their distribution's package manager.
Installation commands for many Linux distributions are available at [http://git-scm.com/download/linux Linux].

For example, Debian-based Linux distributions can use [http://en.wikipedia.org/wiki/Advanced_Packaging_Tool APT] (Advanced Packaging Tool).
{{{
$ sudo apt-get install git
}}}


== Configure Git User Information ==

After installing Git, the next step is for the user to configure his/her author information (username and email address) so that Git will correctly log the author of a commit. 


To configure Git author information, open the Terminal and type '''git config --global user.name "user's name"''', which will allow you to configure Git on your local machine. Each repository you create will use the same user (author) configuration if you use the global flag (as in the provided example). 

{{{
$ git config --global user.name "John Smith"

$ git config --global user.email "john.smith@example.com"
}}}

You can check your user information by typing the following command:

{{{
$ git config --list
}}}


== Configure Github User Account ==
Before a pull request can be submitted to a [https://github.com/SeattleTestbed SeattleTestbed]
repository, a user account (free) must be created on Github.  This user account is also needed to create
new repositories and fork (create a copy) ones that already exist on Github.


A Github user account can be created at https://github.com/join

Once users create their accounts, user-specific home pages are created. For example: ''https://github.com/john-smith''  


== Fork a SeattleTestbed Repository ==

Forking refers to making a copy of a repository and saving it to your user home page. General instructions on forking repositories and managing pull requests is available
[https://help.github.com/articles/fork-a-repo here]

Forking one of the [https://github.com/SeattleTestbed SeattleTestbed] repositories
requires clicking the ''fork'' button on the selected repository's Github page, which creates
a copy of the repository and saves it to a repository directly controlled by the user (on the user's Github home page).
The URL of the forked repository can then be used with Git to create and save a local copy.  

Navigate to the [https://github.com/SeattleTestbed/repy_v2 repy_v2] repository
and click on the ''fork'' button in the upper right-hand corner of the page.
[[Image(https://github-images.s3.amazonaws.com/help/repository/fork_button.jpg)]]

== Clone a Git Repository ==

The ''git clone'' command creates a local copy of a remotely hosted Github repository.  In the following
example, the ''repy_v2'' repository is cloned to the users local Git repository.  

{{{
$ git clone https://github.com/john-smith/repy_v2
Cloning into 'repy_v2'...
remote: Counting objects: 1547, done.
remote: Total 1547 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1547/1547), 1.06 MiB | 0 bytes/s, done.
Resolving deltas: 100% (778/778), done.
Checking connectivity... done.
}}}


A ''repy_v2'' folder is created in the current directory.  You must switch to
the cloned repository's directory, or one of its sub-directories, to successfully
issue Github commands.

{{{
$ cd repy_v2/
}}}

=== Set Alias for Forked Repository ===
An alias of the forked repository can be created to better manage repository changes and
keep the remote and forked repositories in sync.  The alias can refer to the forked repository
by name instead of its full URL.  The ''upstream'' alias is set to the forked ''repy_v2''
repository.


{{{
$ git remote add upstream https://github.com/SeattleTestbed/repy_v2.git
}}}


=== Retrieve Latest Version of Forked Repository ===
Fetching and merging the latest changes of upstream can be done with the
''pull'' command.
{{{
$ git pull upstream master
From https://github.com/SeattleTestbed/repy_v2
 * branch            master     -> FETCH_HEAD
  * [new branch]      master     -> upstream/master
  Already up-to-date.
}}}

=== Add a New Feature Branch ===

List all known branches of the repository.  A
[http://git-scm.com/book/en/Git-Branching-What-a-Branch-Is Git branch] can
be viewed as a set of commits   

{{{
$ git branch
* master
}}}

{{{
$ git branch new_feature
}}}

{{{
$ git checkout new_feature
Switched to branch 'new_feature'
}}}


=== Commit a New File to the Repository ===
Create a README.txt file and save it. 

{{{
$ git status
On branch new_feature
Untracked files:
  (use "git add <file>..." to include in what will be committed)

    README.txt

    nothing added to commit but untracked files present (use "git add" to track)
}}}

{{{
$ git add README.txt

$ git status
On branch new_feature
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    new file:   README.txt
}}}

{{{
$ git commit -m "Add a README file to the project"
[new_feature 7660f34] Add a README file to the project
 1 file changed, 1 insertion(+)
  create mode 100644 README.txt
}}}

{{{
$ git status
On branch new_feature
nothing to commit, working directory clean
}}}

To get a list of commit messages made thus far type: git log 
This will show the user information and the commit message (in this case "Add a README to the project"):

{{{
$ git log
commit 3c9b1d0068075fdac6ed928f8e5a27ac3253ca5e
Author: John Smith <john.smith@example.com>
Date:   Tue Sep 2 14:46:36 2014 -0400

    Add a README to the project.
}}}



=== Push the Commit to Github ===

{{{
$ git push origin new_feature

Username for 'https://github.com': john-smith 
Password for 'https://john-smith@github.com': 
Counting objects: 5, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (2/2), done.
Writing objects: 100% (3/3), 308 bytes | 0 bytes/s, done.
Total 3 (delta 1), reused 0 (delta 0)
To https://github.com/john-smith/repy_v2
 * [new branch]      new_feature -> new_feature
}}}


=== Pull Request ===

Visit the forked ''repy_v2'' repository and click on the green button next to the drop-down list of branches.
The review page provides a field to enter a summary of the commit changes and review changes before
submitting a pull request. 
[[Image(https://github-images.s3.amazonaws.com/help/pull_requests/pull-request-start-review-button.png)]]



== Miscellaneous Git commands ==

Show the changes in README.txt that have not been committed.
{{{
$ git diff README.txt
diff --git a/README.txt b/README.txt
index 70a3d0f..93bce69 100644
--- a/README.txt
+++ b/README.txt
@@ -1 +1,2 @@
 README file.
 +new line added here.
}}}

Mark the README.txt as remove and stage it for removal.
{{{
$ git rm README.txt
}}}


Unstage the modified README.txt file and reset its contents to the current version on the repository.
{{{
$ git reset README.txt
}}}

Move a file to a new location but let Git know of the change.
{{{
$ git mv
}}}

Temporarily store modified files in order to change branches.

{{{
$ git stash
$ git stash list
$ git stash pop
}}}