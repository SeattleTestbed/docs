= Using SVN =
Accessing SVN is important for all contributors, regardless of whether they are able to commit code themselves.

[[TOC(inline)]]



== Browsing SVN through Trac ==
Anybody can [https://seattle.poly.edu/browser/seattle/trunk browse the SVN] tree using their web browser. This is available to anonymous users.


== Setting up Subversion ==

=== On Windows ===

==== Get SVN ====
Download the `win32svn` installer from [http://sourceforge.net/projects/win32svn/files/1.6.17/Setup-Subversion-1.6.17.msi/download]

Install it.

==== Configure icon paths ====
The environment variable for the icons is not set by default.

Open up a command prompt (see this [http://www.youtube.com/watch?v=qrQMLOykSH4 video] for details) and type:
{{{
SET APR_ICONV_PATH = C:\Program Files\Subversion\iconv
}}}

==== Test Environment variables ====
Now that we've installed svn, we should test that it was installed correctly.

Open up a command prompt, type `svn --version`, and hit the `enter` key. The output should be similar to the following:
{{{
C:\Users\User>svn --version

svn, version 1.6.17 (r1128011)

   compiled Jun  2 2011, 23:35:08


Copyright (C) 2000-2009 CollabNet.

Subversion is open source software, see http://subversion.apache.org/

This product includes software developed by CollabNet (http://www.Collab.Net/).
}}}

The next thing to test is that the path to the iconv folder was set correctly. To do that, type `echo %APR_ICONV_PATH%` into the command prompt, and hit `enter`. The output should be similar to the following:
{{{
C:\Users\User> echo %APR_ICONV_PATH%
C:\Program Files\Subversion\iconv
}}}

=== On Linux ===
Open a terminal.[[BR]]
Type the following into the terminal, and then hit `enter`:
{{{
sudo apt-get install subversion
}}}


== Anonymous access ==
To check out the repository anonymously (read-only):

{{{
svn co https://seattle.poly.edu/svn/seattle/trunk/
}}}


If you have previously checked out from our repository using an {{{http://}}} url rather than {{{https://}}}, you can update the source with the following command (issued from the root of your local SVN folder):

{{{
svn switch --relocate http://seattle.poly.edu/svn https://seattle.poly.edu/svn
}}}


Depending on your system, you may be asked to accept the SSL certificate. Here is an example, showing our certificate's correct SHA1 fingerprint:

{{{
~/trunk$ svn switch --relocate http://seattle.poly.edu/svn https://seattle.poly.edu/svn
Error validating server certificate for 'https://seattle.poly.edu:443':
 - The certificate is not issued by a trusted authority. Use the
   fingerprint to validate the certificate manually!
Certificate information:
 - Hostname: seattle.poly.edu
 - Valid: from Tue, 20 Oct 2009 20:13:04 GMT until Thu, 21 Oct 2010 19:06:54 GMT
 - Issuer: 07969287, http://certificates.godaddy.com/repository, GoDaddy.com, Inc., Scottsdale, Arizona, US
 - Fingerprint: c3:b7:3e:d9:2c:f7:3d:45:7b:68:40:81:27:9a:51:45:a1:97:a6:6f
(R)eject, accept (t)emporarily or accept (p)ermanently?
}}}

After running the command, you can verify your new settings with `svn info`:
{{{
~/trunk$ svn info
...
URL: https://seattle.poly.edu/svn/seattle/trunk
Repository Root: https://seattle.poly.edu/svn
...
}}}



== Contributor / Developer access ==
'''Test all code before checking it into SVN.'''

For Windows, see [wiki:RepoConfigurationForWindows Configuring SVN on Windows]

To commit changes to the repository, you must have an ssh account on {{{seattle.poly}}}, which hosts the Seattle SVN server. To gain access email seattle-devel@cs. Once you have ssh access to the machine, you can use the following command to checkout (co) the trunk from anywhere:
{{{
svn co svn+ssh://seattle.poly.edu/seattle/trunk/
}}}

If you want to perform the checkout as another user (e.g., "USER"), then use the following command:
{{{
svn co svn+ssh://USER@seattle.poly.edu/seattle/trunk/
}}}

All text files maintained in our repository are in [http://en.wikipedia.org/wiki/Newline Unix format]. Make sure that your files are in the proper format prior to making any commits. You can use the dos2unix tool on {{{seattle.poly}}} to convert DOS-formatted files to Unix format.

'''Note to sysadmins:''' {{{svn+ssh}}} relies on {{{/usr/bin/svnserve}}}. However, to make it so that users don't need to specify the SVN repository root on the server, we have to modify arguments to {{{svnserve}}}. The following wrapper script lives at {{{/usr/local/bin/svnserve}}}:

{{{
#!/bin/bash

# This wrapper lives in /usr/local/bin so it will come before the actual binary at /usr/bin/svnserve
# in people's paths. We don't replace the real binary with a wrapper (renaming the real binary)
# because then it will get clobbered anytime svn is updated.

umask 002
/usr/bin/svnserve --root=/var/local/svn --tunnel
}}}


== Example SVN commands ==
'''Test all code before checking it into SVN.'''

To look inside a directory without checking anything out:
{{{
svn list svn+ssh://seattle.poly.edu/seattle/trunk/repy
}}}

To check out the entire Seattle repository:
{{{
svn checkout svn+ssh://seattle.poly.edu/seattle
}}}

To check out a subdirectory of the repository:
{{{
svn checkout svn+ssh://seattle.poly.edu/seattle/trunk/repy
}}}

To find out some basic information about a checked-out copy, such as the repository root, last changed rev/author/date do:
{{{
svn info
}}}

To contribute code back to the SVN server, first perform an update, then a commit:
{{{
svn update
svn commit
}}}

To track new files/directories, or remove those which are already tracked:
{{{
svn add [filename]
}}}
{{{
svn remove [filename]
}}}

If you have conflicts, you must tell SVN explicitly that you have resolved them, otherwise SVN will fail to commit/update these files:
{{{
svn resolve [filename]
}}}

If you perform an {{{svn status}}} in a folder, it recursively lists all the Modified (M), Deleted (D) and Added (A) files. It will also list files that are in conflict (C) and those about which SVN does not know (?). To see what modifications were made to individual files marked with an M, you can perform a {{{diff}}}:
{{{
svn status
}}}
{{{
svn diff [filename]
}}}

If the Seattle SVN repository moves to a new machine, you can relocate your existing checked-out version using the following command. Here {{{old_repo}}} and {{{new_repo}}} are paths to the old and new roots of the repository that you can find out with {{{svn info}}}:
{{{
svn sw --relocate old_repo new_repo
}}}

For more information about using SVN, reference this list of [http://wiki.greenstone.org/wiki/index.php/Useful_SVN_Commands useful SVN commands].