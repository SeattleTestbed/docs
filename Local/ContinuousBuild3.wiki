= Continuous Build =

We have a continuous build system that runs some of our tests regularly based on the current svn trunk.

Test results page: http://testbed-opensuse.cs.washington.edu/~continuousbuild/

Test failures RSS feed: http://testbed-opensuse.cs.washington.edu/~continuousbuild/failures.rss

It's not fancy (not using Bitten or !BuildBot or anything else). The source is in trunk/continuousbuild/. It's currently running only a small number of our tests. Time just needs to be spent making other tests work with the system.

To add new tests to the system, create files in trunk/continuousbuild/tests/ that are executable and have a filename that starts with 'run_'. Then make the script accept two arguments: the first is a path to svn trunk, the second is a file that all stdout and stderr output from the tests should ultimately be written to. The testrunner then runs the tests and exits with a non-zero status the tests failed. Any output from the testrunner itself will not indicate failure but will be recorded in the logs for the run (that output should be kept to a minimum, though).

After you add new files, you should to go to wherever the tests are running (e.g. testbed-opensuse.cs.washington.edu right now), `svn up trunk`, and then make sure the files you are added are executable now that they are checked out. If the update from svn didn't keep them executable (or if you didn't check them in executable), then you need to make them executable or else the tests will fail.

= Setup on testbed-opensuse =

The following is information specific to setting up the continuous build system on our testbed-opensuse box.

== Python ==

The continuous build on testbed-opensuse is running on Python 2.6.3 which was built by us. The 2.5.1 version of python available on the system by default has problems with sqlite, which are required to run the seattlegeni tests.

Python was built by the `continuousbuild` user with:

{{{
./configure --with-sqlite --prefix=/home/continuousbuild/opt
make install
}}}

and the resulting binary in `~/opt/bin` is linked in `~/bin`. The `cron_run_tests.sh` script in the user's home directory is modified with `export PATH=/home/continuousbuild/bin:$PATH`.

Django 1.1 is also installed by the continuousbuild user with:

{{{
python setup.py install --prefix=/home/continuousbuild/opt
}}}

== Firewall ==

At the time of writing, NAT forwarding is new and not 100% reliable. This was causing the nodemanager tests to occasionally fail when a forwarder couldn't be found. Opening up port 1224 on this opensuse box involved the following:

Create a file `/etc/sysconfig/SuSEfirewall2.d/services/seattle-nodemanager` with the following:

{{{
# space separated list of allowed TCP ports
TCP="1224"
}}}

Edit the file `/etc/sysconfig/SuSEfirewall2` to add the name of the file created above to the list of services here:

{{{
FW_CONFIGURATIONS_EXT="sshd apache2 apache2-ssl seattle-nodemanager"
}}}

Reload the firewall:

{{{
/etc/init.d/SuSEfirewall2_setup reload
}}}

Note: you should check `iptables --list` after you reload the firewall to make sure you did it correctly. I'm not a SuSE person and apparently SuSE people think it makes sense to have two different init.d scripts, `/etc/init.d/SuSEfirewall2_init` and `/etc/init.d/SuSEfirewall2_setup`, and running `/etc/init.d/SuSEfirewall2_init reload` instead of `/etc/init.d/SuSEfirewall2_setup reload` will leave you with something other than what you wanted, namely, what appears to be no new inbound connections to any ports.