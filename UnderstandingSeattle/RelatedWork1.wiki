= Project and work related to Seattle =

There are a wide variety of other platforms and testbeds readily available from a wide range of sources, with an equally expansive set of project goals. Some related projects and their differences include: 

 * [http://www.planet-lab.org/ PlanetLab] is similar in that it offers a platform composed of donated resources from around the world. However, !PlanetLab nodes are dedicated to !PlanetLab, while Seattle computers are not dedicated to the platform. In addition, !PlanetLab's computers and network connectivity are very homogeneous. Seattle aims to be more widely distributed and to support broader resource diversity.

 * [http://satellitelab.mpi-sws.mpg.de/ SatelliteLab] is useful for studying network characteristics and aims to bring heterogeneity to !PlanetLab.   However, due to the reliance on !PlanetLab nodes to forward traffic, !SatelliteLab has fidelity limitations and is not intended or able to scale to the sorts of diversity and size of Seattle.

 * [http://www.emulab.net/ Emulab] provides emulated network environments for researchers to conduct experiments.   While emulation allows more control of network hardware and topology, it does not capture the behavior of the Internet.   Running Seattle allows more realistic experimentation by running on the Internet and support larger scale.

 * [http://boinc.berkeley.edu/ BOINC] and [http://www.cs.wisc.edu/condor/ Condor] also allows users to donate resources. However, the emphasis is on computational power; getting resources from 1000 cheap computers is less preferable than getting resources from a supercomputer.   Seattle places more emphasis on the diversity of the networks and systems used, as computational power is not the main goal.

 * [http://aws.amazon.com/ec2/ Amazon's EC2] provides a paid service that provides operating system virtual machines.   Seattle instead relies on donated resources and provides programming language virtual machines. 

 * [http://code.google.com/appengine/ Google's AppEngine] executes programs written in a constrained version of Python and supports high level abstractions (such as global non-relational storage). It is useful for building locality-oblivious web applications that fit the HTTP request\response protocol model, however, it's transparent handling of scalability and locality make it unsuitable for those wishing to teach or address these fundamental distributed system topics. !AppEngine is run on Google controlled resources instead of on donated resources.

 * [http://splay-project.org/ Splay] project.

 * [http://www.reservoir-fp7.eu/ Reservoir] : Resources and Services Virtualization without Barriers.

 * [http://www.opennebula.org/ OpenNebula] project.

 * [http://open.eucalyptus.com/ Eucalyptus] project.