The goal of Seattle is to create a platform for networking and distributed systems research. This page attempts to explain the different parts of Seattle and how they come together to meet this goal.

= Repy =

The first part of the Seattle is Repy. Repy is the sandbox which restricts API calls and limits the consumption of resources such as CPU, memory, storage space, and network bandwidth.

== Safe API ==
Repy has a limited API for accessing system resources. This is in order to prevent a malicious user using a bug in the Python libraries to escape from the sandbox. The full API is available [wiki:FutureRepyAPI here].

== Safety Analysis ==
Repy disallows code that could allow the program direct access to system resources. Instead, it only allows calls that are in the Repy API. Because Repy is largely a subset of Python, it can leverage the Python interpreter to examine the program's abstract syntax tree. If forbidden code is inside of the script, Repy refuses to run it.

== Limiting resource consumption ==
One of the main goals of Repy is to control the usage of certain system resources.

Resources can be grouped in a few categories:

Certain resources have an active limit of the maximum amount that can be had at a given instant. For example, an instance of Repy is only allowed to use a certain amount of disk space. But independent of that, Repy is also not allowed to use a large amount of disk i/o within a certain time period, as this could also degrade performance for the host. These resources are monitored in two ways:

When an activity that requires a resource is attempted Repy checks how much of that resource was used, and it will either grant the request, or wait until more of that resource is available.


Other resources -- like the CPU and memory usage-- are not able to be directly controlled within python. Instead, Repy creates a new process or thread (OS dependent) which calls OS-specific functions to determine the amount of the CPU and memory used. If the resource renews over time, like CPU usage, Repy pauses the process for a short duration. If it does not renew itself, like memory usage, Repy will kill the process.

For more detailed information, see [wiki:UnderstandingSeattle/CodeSafety CodeSafety]

= Node Manager =
The node manager manages the different sandboxed programs (called vessels) that are running on a computer. The node manager stores information about the vessels it controls and allows vessels to be started, stopped, combined, split, and changed.

Programmers can then connect to the node manager, send a file, and then run that code on the remote vessel. The easiest way to do this is with the Experiment Manager `seash`.


For more detailed information, see [wiki:UnderstandingSeattle/NodeManagerDesign Node Manager] and [wiki:UnderstandingSeattle/SeattleComponents Seattle Components].
 
= SeattleLib =
As mentioned, one of the goals of Repy is to keep the native libraries as small as possible in order to minimize the possibility of a bug in python allowing a malicious user to break out of the sandbox. Therefore, Repy comes with [wiki:SeattleLib SeattleLib], a group of libraries built from Repy code.

= Repy Portability =
Repyportability allows the user to run Repy code directly with Python. It does this by removing the resource limits and exposing the repy API functions to the standard code.