= Readme =
This code is an implementation of TCP over Repy's native UDP.  See the [https://seattle.cs.washington.edu/wiki/TopSecret project wiki].  
This [https://seattle.cs.washington.edu/wiki/TopSecretReadme Readme] is also available online (or maybe you are online).

Checkout the code anonymously:
{{{
#!sh
svn co http://seattle.cs.washington.edu/svn/seattle/trunk/
cd trunk/repy/apps/tcp/ # goto root of library repo
}}}

== Manifest ==
The code has the following layout:
 * *.repy - Classes.
 * examples - Holds example Repy applications.
 * Makefile - Runs test suite and generates distributation versions of the library.
 * tests/ - The files here are test file-folders, classes, resources, and scripts.
  * *.txt - Input files to test sending large amounts of data.
  * * build.sh - Pre-processes test files in folder through Repypp.
  * restrictions.default - All tests run through Repy with this.
  * run_tests.py - Seattle's test runner slightly modified.
  * functionals/ - testing how functions of a single class interact
  * integrations/ - testing how classes interact
  * units/ - testing how each function of a class works in isolation

== Using the Library ==
Here's some basic steps to follow if your starting from a 
clean directory:
{{{
#!sh
# 1. Create a single file of the library to include in an application:
make image # link the library into a single file
# 2. Move the image to the folder with a Repy file that uses the library:
cp image/tcp.repy $APPLICATION_DIR 
# 3. Add the line "include tcp.repy" to your Repy file.
cd $APPLICATION_DIR && emacs in.file
# 4. Pre-process your Repy file:
python repypp.py in.file out.file
# 5. Excute your script locally with Repy:
python repy.py restictions.file out.file
}}}
See the [https://seattle.cs.washington.edu/wiki/StudentsPage Students page] for more details on Repypp and links to help pages for Repy.
See the [https://seattle.cs.washington.edu/wiki/RepyTutorial Repy Tutorial] for an introduction to Repy.

== Example ==
{{{
#!python
  # A hello world application
  include tcp.repy

  if callfunc == 'initialize':
    conn = Connection()
    conn.bind(getmyip(), 12345)

    conn.connect(getmyip(), 12345)
    conn.send("hello world!")
    message = conn.recv(4096)
    conn.disconnect()

    print message
    exitall()
}}}

== Testing == 
To run the test suite do: 
{{{
#!sh
make
}}}
See the Makefile for other options.
     
=== Unit test files ===
Unit test files may be in the format '''z_test_<classname>_<function_name>.repy'''.  
These unit test files just test a single class function.  For example, a unit test 
file of Connection.bind would be in the file '''z_test_connection_bind.repy'''.  Each 
such unit test file contains test functions. Each test function tests a condition 
(ex. if branch) of a class function.

=== Functional test files ===
A functional test file may exist for a class.  A functional test file tests how the 
different functions in a single class interact.  Name a functional test file like 
'''z_test_<classname>.repy'''.  For example, a functional test file of Connection 
would be in the file '''z_test_connection.repy'''.  A functional test file contains 
test functions.  Each test function calls multiple related class functions and makes 
sure they interact correctly.

=== Integration test files ===
Integration files include all of the library.  Integrations should test interaction 
between multiple classes.  Name them like '''z_test_<description>.repy'''.  Each
integration file uses only public interface methods.  The file is an example application
using the library.
