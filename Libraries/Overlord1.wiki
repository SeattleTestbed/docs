= Overlord Deployment and Monitoring Library =

Overlord is a library for deploying an arbitrary Repy program on a number of vessels. Built on top of the Experiment Library, it persistently manages a user-defined number of vessels, ensuring that the specified service is up and running.

[[BR]]
== Setup ==

To begin setup, create a new directory of Overlord:
{{{
mkdir overlord
}}}

Overlord requires the Seattle Experiment Library, which can be obtained by following the steps on [ExperimentLibrary the associated wiki page]. Note that the {{{experimentlibrary}}} directory must be a direct subdirectory the {{{overlord}}} directory created above.

Also note that Overlord depends on Experiment Library functions that make secure connections to SeattleGENI. To perform secure SSL communication with SeattleGENI, you must:
  * Have a GENI user's public and private key files in the {{{overlord}}} directory
    * The filenames must be of the form "USERNAME.publickey" and "USERNAME.privatekey"
  * Have [http://chandlerproject.org/Projects/MeTooCrypto M2Crypto] installed
  * Have a PEM file, (with filename cacert.pem) containing CA certificates in the experimentlibrary directory. One such file can be found at http://curl.haxx.se/ca/cacert.pem

Once all of these dependencies are squared away, you can get a copy of Overlord by running the following command:
{{{
svn export https://seattle.cs.washington.edu/svn/seattle/trunk/overlord/overlord.py
}}}


[[BR]]
== Usage ==

Using the API provided by Overlord, you can create simple scripts to deploy services on vessels.

To create an Overlord client, simply import it:                               
{{{
import overlord                                                             
}}}

and then call the `init()` and `run()` functions with your desired parameters.

`init()` performs all of the initial configuration of vessel deployment. It takes four arguments:
  i. A valid SeattleGENI username
  ii. The number of vessels on which to deploy
  iii. The type of vessels on which to deploy (wan, lan, etc)
  iv. The filename of the Repy program to deploy

`run()` initiates deployment and runs forever, maintaining the user-defined number of deployed vessels. Any arguments passed to it will be passed directly to the Repy program run on vessels. For example, many services require an argument local port on which to listen for connections. For such services, the !SeattleGeni user's local port (available within the dictionary returned by `init()`) must be passed to `run()`.

Once `run()` is called, Overlord will deploy the Repy program on the specified number of vessels and periodically check to ensure that the service is up and running.

[[BR]]
== Example ==
The following script will deploy time servers on 10 WAN vessels:
{{{
import overlord
init_dict = overlord.init(GENI_USERNAME, 10, 'wan', 'time_server.py')
overlord.run(init_dict['geni_port'])
}}}

Note that `time_server.py` requires a local port number as an argument, so the user's GENI port is passed to the `run()` function.

[[BR]]
== Documentation ==

Please refer to [browser:seattle/trunk/overlord/overlord.py the docstrings and comments in `overlord.py`] for further documentation.