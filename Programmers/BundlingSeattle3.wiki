Suppose that an application that you are developing requires some calculation intensive task that you'd like to run on the Seattle network.  In this case, you need to bundle (i.e. include) Seattle alongside your application.  This is trivial to do on Windows, OSX and Linux machines.

[[BR]]
 == Requirements ==
----
In order for Seattle to function, you need to make sure that Python 2.5 or Python 2.6 is installed on your target system.  The Windows installer has Python 2.5 bundled alongside with it, so manual installation of Python is not 

[[BR]]
 == Note for Windows machines ==
----
When installing on Windows machines, you will find *.bat files instead of *.sh files.  The *.sh files are Unix script files for Linux/OSX.  You can simply run the *.bat files with the same filename.

[[BR]]
 == Bundling Seattle ==
----

[[BR]]
 === Download the Seattle Installer ===
Download the [https://seattleclearinghouse.poly.edu/html/getdonations Seattle installer] for your target operating system under your Clearinghouse account.  This will provide your Clearinghouse account with donation credits for each installation.

[[BR]]
 === Bundle the Seattle Installer ===
Take the installer from the previous step and include it alongside your application's installer.  This step depends largely on your application's installer, refer to your installer's manual for instructions.

[[BR]]
 === Extract and Install Seattle ===
In your application's installer, unzip/untar the Seattle installer.  Inside the extracted folder, you will find {{{install.sh}}}.  Run this and Seattle will be installed.  From this point on, Seattle will automatically start when the target system is booted up.

[[BR]]
 === Start Seattle ===
You can start Seattle by running {{{start_seattle.sh}}}.  You are done!

This will start 2 scripts: {{{nmmain.py}}} and {{{softwareupdater.py}}}.  nmmain.py is the node manager that interacts with Seattle and also manages the vessels that will run on your target system.  softwareupdater.py will periodically check for the latest version of Seattle, and update your target systems as necessary.

[[BR]]
 == Removing Seattle ==
----
When the user does not want to continue using your application, you must be sure to also remove Seattle as you are uninstalling your application.  This is very easy to do.

[[BR]]
 === Stop Seattle ===
Before uninstalling Seattle, you must first stop Seattle.  You do this by running {{{stop_seattle.sh}}} from the Seattle directory.  This will stop Seattle from auto-starting on system boot.  

[[BR]]
 === Uninstall Seattle ===
You can now uninstall Seattle.  This can be done by running {{{uninstall.sh}}}.

After uninstalling Seattle, you can delete the directory that you extracted Seattle to.